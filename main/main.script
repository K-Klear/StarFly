local STATS = require("main/modules/stats")
local CREW = require("main/modules/crew")
local PLANET = require("main/modules/planets")
local TIME = require("main/modules/time")
local CARGO = require("main/modules/cargo")

local function travel(target)
	if target == hash("orbit") then
		msg.post("/background", "orbit")
	elseif target == hash("planet")	then
		msg.post("/background", "land")
	else
		STATS.fuel = STATS.fuel - 1
		STATS.food = STATS.food - #CREW.list
		if STATS.destination.job_id then
			PLANET.current = STATS.jobs[STATS.destination.region][STATS.destination.job_id].planet
			STATS.current_job = {region = STATS.destination.region, job_id = STATS.destination.job_id}
		else
			PLANET.current = PLANET.new(STATS.destination.region)
			STATS.current_job = nil
		end
		msg.post("/background", "space")
	end
		--[[
	elseif type(target) == "number" then
		STATS.fuel = STATS.fuel - 1
		STATS.food = STATS.food - #CREW.list
		PLANET.current = STATS.jobs[target].planet
		msg.post("/background", "space")
	end
	--]]
end

function spawn_crew(crewID, x, y, z)
	if not x then x = 10 + math.random(0, 3) end
	if not y then y = 2 end
	if not z then z = crewID end
	local props = {
		skin_colour = CREW.list[crewID].face.skin_colour,
		hair_colour = CREW.list[crewID].face.hair_colour,
		clothes_colour = CREW.list[crewID].face.clothes_colour,
		hair = CREW.list[crewID].face.hair,
		name_key = CREW.list[crewID].name.key,
		name_gender = CREW.list[crewID].name.gender,
		role = CREW.list[crewID].role,
		x = x, y = y, z = z
	}
	CREW.list[crewID].go = factory.create("/ship#spawn_crew", nil, nil, props)
	CREW.check_issue(nil, CREW.list[crewID])
end

function init(self)
	TIME.start()
	--[[
	CREW.add(); CREW.add(); CREW.add()
	CREW.list[1].role = hash("role_pilot")
	CREW.list[2].role = hash("role_comms")
	CREW.list[3].role = hash("role_engineer")
	--]]
end

function on_message(self, message_id, message, sender)
	if message_id == hash("travel") then
		travel(message.target)
	elseif message_id == hash("spawn_crew") then
		spawn_crew(message.crewID, message.x, message.y, message.z)
	elseif message_id == hash("spawn_box") then
		CARGO.shelves[message.x][message.y] = factory.create("/ship#box_factory", message.pos, nil, {colour = message.colour})
		go.set_parent(CARGO.shelves[message.x][message.y], "/ship")
	elseif message_id == hash("job_accepted") then
		local region = PLANET.current.jobs[message.id].region
		table.insert(STATS.jobs[region], PLANET.current.jobs[message.id])
		table.remove(PLANET.current.jobs, message.id)
		local new_job = STATS.jobs[region][#STATS.jobs[region]]
		if new_job.type == hash("passage") then
			CREW.add(nil, true)
			new_job.passengers = {CREW.list[#CREW.list].id}
		end
	elseif message_id == hash("job_completed") then
		local job = STATS.jobs[STATS.current_job.region][STATS.current_job.job_id]
		for key, val in ipairs(CREW.list) do
			val.money = val.money + (job.wage * (val.wage / 100))
		end
		STATS.money = STATS.money + (job.wage * (STATS.wage / 100))
		if job.type == hash("passage") then
			for key, val in ipairs(job.passengers) do
				local passenger = CREW.get_id(val)
				CREW.dismiss(passenger)
			end
		end
		table.remove(STATS.jobs[STATS.current_job.region], STATS.current_job.job_id)
		STATS.current_job = {}
		msg.post("#controller", hash("refresh_infobox"))
	end
end