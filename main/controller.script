local STATS = require("main/modules/stats")
local PLANET = require("main/modules/planets")
local CREW = require("main/modules/crew")
local EVENT = require("main/modules/events")
local TALK = require("main/modules/conversation")
local STR = require("main/modules/strings")
local DICE = require("main/modules/dice")
local BRAIN = require("main/modules/brain")
local LAY = require("main/modules/dialog_layouts")
local TIME = require("main/modules/time")
local DEBUG = require("main/modules/debug")
local CARGO = require("main/modules/cargo")
local UPG = require("main/modules/upgrades")

local centre = vmath.vector3(1280 / 2, 900 / 2, 0.8)

-- note: dialog z-pos goes from 0.8. 11th level dialog will not be visible.

local stack = {}
local infobox

local button_x, button_y = 116, 54

local function open_main()
	for key, val in ipairs(stack) do
		go.delete(val.dialog, true)
	end
	if infobox then go.delete(infobox, true); infobox = nil	end
	stack = {}
	local props = {size = vmath.vector3(800, 0, 0), layout = STATS.location}
	stack[1] = {dialog = factory.create("#dialog", vmath.vector3(centre.x, 100, centre.z), nil, props)}
	local props = {size = vmath.vector3(button_x * 2.25, button_y * 3, 0), layout = hash("infobox")}
	infobox = factory.create("#dialog", vmath.vector3(1110, 780, centre.z), nil, props)
	msg.post("/cursor", hash("crew_selection"), {enabled = true})
end

function init(self)
	open_main()
end

local function close_all_dialogs(main_on)
	if main_on then
		open_main()
		TIME.start()
	else
		for key, val in ipairs(stack) do
			go.delete(val.dialog, true)
		end
		if infobox then go.delete(infobox, true); infobox = nil	end
		stack = {}
		msg.post("/cursor", hash("crew_selection"), {enabled = false})
	end
end

local function open_dialog(layout, title, id, refresh_message)
	local size_x, size_y = LAY[layout].size_x, LAY[layout].size_y
	if type(size_x) == "function" then size_x = size_x() end
	if type(size_y) == "function" then size_y = size_y() end
	local props = {size = vmath.vector3(button_x * size_x, button_y * size_y, 0), title = STR.save_title(title), layout = layout, id = id}
	table.insert(stack, {dialog = factory.create("#dialog", vmath.vector3(centre.x, centre.y, 0.8 + #stack * 0.02), nil, props), refresh_message = refresh_message})
	if stack[#stack - 1] then
		msg.post(stack[#stack - 1].dialog, "disable_all")
	end
	msg.post("/cursor", hash("crew_selection"), {enabled = false})
	TIME.stop()
end

local function refresh_dialog(close_first)
	if close_first then
		go.delete(stack[#stack].dialog, true); stack[#stack] = nil
	end
	local refresh = stack[#stack].refresh_message
	if refresh then
		go.delete(stack[#stack].dialog, true); stack[#stack] = nil
		msg.post("#", refresh)
	else
		if #stack == 1 then
			open_main()
			TIME.start()
		else
			msg.post(stack[#stack].dialog, "enable_all")
		end
	end
end

local function refresh_infobox()
	go.delete(infobox, true)
	local props = {size = vmath.vector3(button_x * 2.25, button_y * 3, 0), layout = hash("infobox")}
	infobox = factory.create("#dialog", vmath.vector3(1110, 780, centre.z), nil, props)
end

function on_message(self, message_id, message, sender)
	if DEBUG.show_controller_messages then print(message_id.." id: "..(message.id or "none")) end
	if message_id == hash("buy_pressed") then
		local price = (CARGO.food_max - CARGO.food) * PLANET.get("price_food") + (1 - CARGO.fuel) * PLANET.get("price_fuel")
		price = math.ceil(price)
		if price == 0 then
			open_dialog(hash("error"), hash("title_error_fully_stocked"))
		elseif STATS.money < price then
			open_dialog(hash("error"), hash("title_error_not_enough_money"))
		else
			open_dialog(hash("error"), "You paid "..price.." credits.")
			STATS.money = STATS.money - price
			CARGO.food = CARGO.food_max
			CARGO.fuel = 1
			refresh_infobox()
		end
	elseif message_id == hash("recruit_pressed") then
		if #PLANET.get("recruits") == 0 then
			open_dialog(hash("error"), hash("title_error_no_recruits"))
		else
			open_dialog(hash("recruit"), hash("title_recruit"), nil, message_id)
		end
	elseif message_id == hash("recruit_interview") then
		msg.post(stack[#stack].dialog, "disable_all")
		TALK.start("recruitment", PLANET.get("recruits")[message.id])
	elseif message_id == hash("recruit_hire") then
		if #CREW.list >= STATS.max_crew then
			open_dialog(hash("error"), hash("title_error_crew_full"))
		else
			CREW.add(PLANET.get("recruits")[message.id])
			table.remove(PLANET.get("recruits"), message.id)
			refresh_dialog()
		end
	elseif message_id == hash("crew_overview") then
		if #CREW.list == 0 then
			open_dialog(hash("error"), hash("title_error_no_crew"))
		else
			if STATS.new_time then
				STATS.leave_duration_default = STATS.new_time - TIME.time
				STATS.leave_end = STATS.new_time
				STATS.new_time = nil
			elseif not STATS.leave_end then
				STATS.leave_end = TIME.time + STATS.leave_duration_default
			end
			open_dialog(hash("crew_overview"), hash("title_crew"), nil, message_id)
			for key, val in ipairs(CREW.list) do
				if val.shipbound_forced then
					msg.post(stack[#stack].dialog, "turn_button_off", {button = hash("crew_shipbound"), id = key})
				else
					msg.post(stack[#stack].dialog, "turn_button_on", {button = hash("crew_shipbound"), id = key})
				end
			end
		end
	elseif message_id == hash("crew_duty") then
		open_dialog(hash("crew_duty"), hash("title_crew_duty"), message.id, message_id)
	elseif message_id == hash("crew_duty_guard") then
		CREW.list[message.id].duty = hash("duty_guard")
		CREW.list[message.id].shipbound = true
		CREW.list[message.id].shipbound_forced = true
		refresh_dialog(true)
	elseif message_id == hash("crew_duty_repair") then
		CREW.list[message.id].duty = hash("duty_repair")
		CREW.list[message.id].shipbound = true
		CREW.list[message.id].shipbound_forced = true
		refresh_dialog(true)
	elseif message_id == hash("crew_duty_standby") then
		CREW.list[message.id].duty = hash("duty_standby")
		CREW.list[message.id].shipbound = true
		CREW.list[message.id].shipbound_forced = true
		refresh_dialog(true)
	elseif message_id == hash("crew_duty_cleaning") then
		CREW.list[message.id].duty = hash("duty_cleaning")
		CREW.list[message.id].shipbound = true
		CREW.list[message.id].shipbound_forced = true
		refresh_dialog(true)
	elseif message_id == hash("crew_duty_other") then
		CREW.list[message.id].duty = hash("duty_other")
		CREW.list[message.id].shipbound_forced = false
		refresh_dialog(true)
	elseif message_id == hash("crew_duty_none") then
		CREW.list[message.id].duty = nil
		CREW.list[message.id].shipbound_forced = false
		refresh_dialog(true)
	elseif message_id == hash("crew_shipbound") then
		if CREW.list[message.id].shipbound then
			CREW.list[message.id].shipbound = nil
		else
			CREW.list[message.id].shipbound = true
		end
		refresh_dialog()
	elseif message_id == hash("crew_set_leave") then
		STATS.new_time = STATS.leave_end or (STATS.leave_duration_default + TIME.time)
		open_dialog(hash("time_choice"), hash("title_leave_duration_selection"))
	elseif message_id == hash("crew_overview_confirm") then
		if STATS.leave_end > TIME.time then
			TIME.add_alarm(STATS.leave_end, hash("leave_over"), true)
		end
		refresh_dialog(true)
	elseif message_id == hash("crew_pressed") then
		if #CREW.list == 0 then
			open_dialog(hash("error"), hash("title_error_no_crew"))
		else
			open_dialog(hash("crew"), hash("title_crew"), nil, message_id)
			for key, val in ipairs(CREW.list) do
				if val.wage == 0 then
					msg.post(stack[#stack].dialog, "turn_button_off", {button = hash("crew_wage_minus"), id = key})
				end
				if STATS.wage == 0 then
					msg.post(stack[#stack].dialog, "turn_button_off", {button = hash("crew_wage_plus"), id = key})
				end
				if val.role == hash("role_passenger") then
					msg.post(stack[#stack].dialog, "turn_button_off", {button = hash("crew_role"), id = key})
					msg.post(stack[#stack].dialog, "delete_element", {button = hash("crew_wage_plus"), id = key})
					msg.post(stack[#stack].dialog, "delete_element", {button = hash("crew_wage_minus"), id = key})
					msg.post(stack[#stack].dialog, "delete_element", {button = hash("crew_wage_label"), id = key})
					msg.post(stack[#stack].dialog, "delete_element", {button = hash("crew_dismiss"), id = key})
				end
			end
		end
	elseif message_id == hash("crew_role") then
		open_dialog(hash("crew_role"), hash("title_role_selection"), message.id, message_id)
	elseif message_id == hash("crew_role_pilot") then
		CREW.set_role(message.id, hash("role_pilot"), true)
		refresh_dialog(true)
	elseif message_id == hash("crew_role_engineer") then
		CREW.set_role(message.id, hash("role_engineer"), true)
		refresh_dialog(true)
	elseif message_id == hash("crew_role_comms") then
		CREW.set_role(message.id, hash("role_comms"), true)
		refresh_dialog(true)
	elseif message_id == hash("crew_role_medic") then
		CREW.set_role(message.id, hash("role_medic"), true)
		refresh_dialog(true)
	elseif message_id == hash("crew_role_gunner") then
		CREW.set_role(message.id, hash("role_gunner"), true)
		refresh_dialog(true)
	elseif message_id == hash("crew_role_none") then
		CREW.set_role(message.id, hash("role_none"))
		refresh_dialog(true)
	elseif message_id == hash("crew_wage_plus") then
		if STATS.wage > 0 and CREW.list[message.id].wage < 100 then
			CREW.list[message.id].wage = CREW.list[message.id].wage + 5
			STATS.wage = STATS.wage - 5
		end
		refresh_dialog()
	elseif message_id == hash("crew_wage_minus") then
		if CREW.list[message.id].wage > 0 then
			CREW.list[message.id].wage = CREW.list[message.id].wage - 5
			STATS.wage = STATS.wage + 5
		end
		refresh_dialog()
	elseif message_id == hash("crew_background") then
		open_dialog(hash("crew_background"), nil, message.id)
	elseif message_id == hash("crew_talk") then
		CREW.check_issue(nil, CREW.list[message.id])
		msg.post(stack[#stack].dialog, "disable_all")
		TALK.start("crew_talk_general", CREW.list[message.id])






		
	elseif message_id == hash("crew_dismiss") then
		CREW.dismiss(message.id)
		refresh_dialog(false)
	elseif message_id == hash("crew_confirm") then
		CREW.check_issue(hash("low_wage"))
		refresh_dialog(true)
	elseif message_id == hash("jobs_pressed") then
		if #PLANET.get("jobs") == 0 then
			open_dialog(hash("error"), hash("title_error_no_jobs"))
		else
			open_dialog(hash("jobs"), hash("title_jobs"), nil, message_id)
		end
	elseif message_id == hash("jobs_accept") then
		msg.post("/main", hash("job_accepted"), {id = message.id})
		close_all_dialogs(true)
	elseif message_id == hash("travel_pressed") then
		if not (CARGO.fuel > 0) then
			open_dialog(hash("error"), hash("title_error_no_fuel"))
		elseif CARGO.food == 0 then
			open_dialog(hash("error"), hash("title_error_no_food"))
		elseif not CREW.get_role(hash("role_pilot")) then
			open_dialog(hash("error"), hash("title_error_no_pilot"))
		else
			if STATS.destination.time then
				if STATS.new_time then
					STATS.destination.time = STATS.new_time
					STATS.new_time = nil
				end
				open_dialog(hash("travel_confirm"), hash("title_departure_time_selection"), nil, message_id)
			else
				open_dialog(hash("travel"), hash("title_travel"), nil, message_id)
				for key, val in pairs(STATS.jobs) do
					if #val > 0 then
						msg.post(stack[#stack].dialog, "turn_button_on", {button = key})
					end
				end
			end
		end
	elseif message_id == hash("travel_destination_pressed") then
		local end_function
		if message.id == 1 then
			STATS.destination.region = hash("core")
		elseif message.id == 2 then
			STATS.destination.region = hash("frontier")
		elseif message.id == 3 then
			STATS.destination.region = hash("rim")
		elseif message.id == 4 then
			STATS.destination.region = hash("core")
			if #STATS.jobs[hash("core")] > 1 then
				open_dialog(hash("job_selection"), hash("job_selection"), nil, message_id)
				end_function = true
			else
				STATS.destination.job_id = 1
			end
		elseif message.id == 5 then
			STATS.destination.region = hash("frontier")
			if #STATS.jobs[hash("frontier")] > 1 then
				open_dialog(hash("job_selection"), hash("job_selection"), nil, message_id)
				end_function = true
			else
				STATS.destination.job_id = 1
			end
		elseif message.id == 6 then
			STATS.destination.region = hash("rim")
			if #STATS.jobs[hash("rim")] > 1 then
				open_dialog(hash("job_selection"), hash("job_selection"), nil, message_id)
				end_function = true
			else
				STATS.destination.job_id = 1
			end
		end
		if not end_function then
			if STATS.new_time then
				STATS.destination.time = STATS.new_time
				STATS.new_time = nil
			else
				STATS.destination.time = TIME.time
			end
			open_dialog(hash("travel_confirm"), hash("title_travel_confirm"), nil, message_id)
		end

	elseif message_id == hash("travel_set_time") then
		STATS.new_time = STATS.destination.time
		open_dialog(hash("time_choice"), hash("title_departure_time_selection"))
	elseif message_id == hash("travel_cancel") then
		STATS.destination = {}
		refresh_dialog(true)
	elseif message_id == hash("travel_accept") then
		if STATS.destination.time - TIME.time < 1 then
			local target_planet_id
			if STATS.destination.job_id then
				target_planet_id = STATS.jobs[STATS.destination.region][STATS.destination.job_id].planet_id
			else
				target_planet_id = PLANET.new_planet({region = STATS.destination.region})
			end
			local distance = math.abs(PLANET.get("position", target_planet_id) - PLANET.get("position"))
			local fuel_needed = UPG.get("jump_cost", hash("warp_drive")) + (distance * UPG.get("distance_cost", hash("warp_drive")))
			if CARGO.fuel < fuel_needed then
				close_all_dialogs(true)
				open_dialog(hash("error"), hash("title_error_no_fuel"))
			else
				CARGO.fuel = CARGO.fuel - fuel_needed
				CARGO.food = CARGO.food - #CREW.list
				PLANET.current_id = target_planet_id
				if STATS.destination.job_id then
					STATS.current_job = {region = STATS.destination.region, job_id = STATS.destination.job_id}
				else
					STATS.current_job = nil
				end
				STATS.destination = {}
				msg.post("/background", "takeoff")
				STATS.location = hash("takeoff")
				close_all_dialogs()
			end
		else
			TIME.add_alarm(STATS.destination.time, hash("departure"), true)
			close_all_dialogs(true)
		end
	elseif message_id == hash("job_selected") then
		STATS.destination.job_id = message.id
		STATS.destination.time = TIME.time
		open_dialog(hash("travel_confirm"), hash("title_travel_confirm"), nil, hash("travel_pressed"))
	elseif message_id == hash("continue_pressed") then
		if not CREW.get_role(hash("role_pilot")) then
			open_dialog(hash("error"), hash("title_error_no_pilot"))
		else
			close_all_dialogs(false)
			msg.post("/background", "warp")
			STATS.location = hash("warp")
		end
	elseif message_id == hash("land_pressed") then
		if not CREW.get_role(hash("role_pilot")) then
			open_dialog(hash("error"), hash("title_error_no_pilot"))
		else
			close_all_dialogs(false)
			STATS.location = hash("landing")
			msg.post("/background", "land")
		end
	elseif message_id == hash("transition_space") then
		STATS.warp_drive_cooldown = true
		TIME.add_alarm(TIME.time + UPG.get("cooldown", hash("warp_drive")), hash("warp_drive_cooldown"))
		local distance = math.max(0.1, math.random() - (UPG.get("jump_accuracy", hash("warp_drive")) * CREW.get_role(hash("role_pilot")).skills.pilot))
		local eta = math.ceil(distance * UPG.get("seconds_per_distance", hash("impulse_drive")))
		STATS.
		print(TIME.get_time_string(eta))
		
		STATS.location = hash("flight")
		EVENT.new(hash("flight"))
	elseif message_id == hash("transition_orbit") then
		STATS.location = hash("orbit")
		EVENT.new(hash("orbit"))
	elseif message_id == hash("transition_planet") then
		if STATS.current_job then msg.post("#main", hash("job_completed")) end
		STATS.location = hash("landed")
		EVENT.new(hash("landing"))
	elseif message_id == hash("event_progress") then
		local stage = EVENT.current[EVENT.stage]
		EVENT.links = stage.links	
		if stage.effect == hash("recruit_random") then
			local new_crew = CREW.new()
			new_crew.desperation = math.random(); new_crew.wage_promised = 0
			CREW.add(new_crew)
		elseif stage.effect then
			error("Unknown event effect")
		end
		if stage.stage_type == "choice" then
			open_dialog(hash("event"), nil, nil, message_id)
		elseif stage.stage_type == "dice" then
			if DICE.roll(stage.dice_type, stage.dice_difficulty) then
				EVENT.stage = stage.links[1].stage
			else
				EVENT.stage = stage.links[2].stage
			end
			msg.post(".", hash("event_progress"))
		elseif stage.stage_type == "end" then
			open_dialog(hash("event_end"), nil, nil, message_id)
		end
	elseif message_id == hash("event_option") then
		EVENT.stage = EVENT.current[EVENT.stage].links[message.id].stage
		refresh_dialog(false)
	elseif message_id == hash("event_end") then
		EVENT.stage = 0; EVENT.current = nil
		close_all_dialogs(true)
		--open_main()
	elseif message_id == hash("talk_progress") then
		local stage = TALK.current[TALK.stage]
		TALK.links = stage.links
		if stage.effect == hash("recruit") then
			CREW.add(TALK.speaker)
			for key, val in ipairs(PLANET.get("recruits")) do
				if val == TALK.speaker then
					table.remove(PLANET.get("recruits"), key); break
				end
			end
		elseif stage.effect == hash("pick_role") then
			open_dialog(hash("crew_role"), hash("title_role_selection"), CREW.get_id(TALK.speaker), hash("crew_role"))
			error("I need to fix this")
		elseif stage.effect then
			error("Unknown conversation effect!")
		end
		if stage.stage_type == "choice" then
			open_dialog(hash("talk"), nil, nil, message_id)
		elseif stage.stage_type == "dice" then
			if DICE.roll(stage.dice_type, stage.dice_difficulty) then
				TALK.stage = stage.links[1].stage
			else
				TALK.stage = stage.links[2].stage
			end
			msg.post(".", hash("talk_progress"))
		elseif stage.stage_type == "brain" then
			TALK.stage = stage.links[BRAIN.talk_test(TALK.speaker, stage.dice_type)].stage
			msg.post(".", hash("talk_progress"))
		elseif stage.stage_type == "end" then
			open_dialog(hash("talk_end"), nil, nil, message_id)
		end
	elseif message_id == hash("talk_option") then
		TALK.stage = TALK.current[TALK.stage].links[message.id].stage
		refresh_dialog(false)
	elseif message_id == hash("talk_end") then
		TALK.stage = 0; TALK.current = nil; TALK.speaker = nil
		refresh_dialog(true)
	elseif message_id == hash("time_choice_cancel") then
		STATS.new_time = nil
		refresh_dialog(true)
	elseif message_id == hash("time_choice_accept") then
		refresh_dialog(true)
	elseif message_id == hash("refresh_infobox") and infobox then
		refresh_infobox()
	elseif message_id == hash("close") then
		refresh_dialog(true)
	elseif message_id == hash("clock_scale_normal") then
		TIME.set_scale(hash("normal"))
	elseif message_id == hash("clock_scale_fast") then
		TIME.set_scale(hash("fast"))
	elseif message_id == hash("clock_scale_faster") then
		TIME.set_scale(hash("faster"))
	elseif message_id == hash("clock_scale_fastest") then
		TIME.set_scale(hash("fastest"))
	elseif message_id == hash("error") then
		open_dialog(hash("error"), message.title)
	elseif message_id == hash("debug") then

	end
end