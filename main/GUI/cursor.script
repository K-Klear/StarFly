local screen_size = {x = 1280, y = 900}
local active_button
local mouse_pressed = false

local crew_moused = {}
local room_moused = {}
local highlighted
local selected

local moused = {}

local selection_enabled = {[hash("crew")] = true, [hash("bunks")] = true, [hash("room")] = true}

function init(self)
	msg.post(".", "acquire_input_focus")
end

local function set_highlight()
	local moused_next
	for key, val in ipairs(moused) do
		if selection_enabled[val.type] then
			moused_next = val; break
		end
	end

	if highlighted and (not moused_next or highlighted.go ~= moused_next.go) and (not selected or highlighted.go ~= selected.go) then
		msg.post(highlighted.go, "remove_highlight")
	end
	if moused_next then
		if not highlighted or moused_next.go ~= highlighted.go then
			msg.post(moused_next.go, "highlight")
			highlighted = {go = moused_next.go, type = moused_next.type}
		end
	else
		if highlighted and (not selected or highlighted.go ~= selected.go) then
			msg.post(highlighted.go, "remove_highlight")
			highlighted = nil
		end
	end
end

local function delete_moused(value)
	for key, val in ipairs(moused) do
		if val.go == value then
			table.remove(moused, key)
			return
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		if message.enter then
			if message.other_group == hash("button") then
				active_button = message.other_id
				if mouse_pressed then msg.post(active_button, "pressed") end
			elseif message.other_group == hash("crew") then
				table.insert(moused, 1, {go = message.other_id, type = message.other_group})
			elseif message.other_group == hash("room") or message.other_group == hash("bunk") then
				table.insert(moused, {go = message.other_id, type = message.other_group})
			end
		else
			if message.other_group == hash("button") then
				msg.post(message.other_id, "released")
				if active_button == message.other_id then active_button = nil end
			else
				delete_moused(message.other_id)
			end
		end
		set_highlight()
	elseif message_id == hash("deleted") then
		if active_button == message.id then active_button = nil end
		if selected and selected.go == message.id then selected = nil end
		delete_moused(message.id)
		set_highlight()
	elseif message_id == hash("selected") then
		selected = {go = message.id}
		set_highlight()
	elseif message_id == hash("selection_enabled") then
		if message.enabled == true then
			selection_enabled = {[hash("crew")] = true, [hash("bunks")] = true, [hash("room")] = true}
		elseif message.enabled == false then
			selection_enabled = {[hash("crew")] = false, [hash("bunks")] = false, [hash("room")] = false}
		else
			selection_enabled = {}
			if message.enabled.crew then selection_enabled[hash("crew")] = true end
			if message.enabled.room then selection_enabled[hash("room")] = true end
			if message.enabled.bunk then selection_enabled[hash("bunk")] = true end
		end

		if selected then
			if not selection_enabled[selected.type] then
				msg.post(selected.go, hash("deselect")); selected = nil
			end
		end
	end
end

function on_input(self, action_id, action)
	local zoom = math.min(screen_size.x / 1280, screen_size.y / 900)
	local projected_width = screen_size.x / zoom
	local projected_height = screen_size.y / zoom
	local xoffset = -(projected_width - 1280) / 2
	local yoffset = -(projected_height - 900) / 2
	local x = (action.x / 1280) * projected_width + xoffset
	local y = (action.y / 900) * projected_height + yoffset
	go.set_position(vmath.vector3(x, y, 1), go.get_id("/cursor"))
	if action_id == hash("click") then
		if action.pressed then
			mouse_pressed = true
			if active_button then msg.post(active_button, "pressed") end
		elseif action.released then
			mouse_pressed = false
			if active_button then
				msg.post(active_button, "activated")
			else
				if selected then msg.post(selected.go, hash("deselect")) end
				if highlighted and (not selected or highlighted.go ~= selected.go) then
					msg.post(highlighted.go, "clicked")
				end
				selected = nil
			end
		end
	end
end