math.randomseed(os.time())
math.random(); math.random(); math.random()

local text = require("main.text")
local FPlanet = require("main.planet")
local DH = require("main.dialogs")
local CON = require("main.constants")
local EVENTS = require("main.events")
local FCrew = require("main.functionsCrew")
local FACE = require("main.face")
local UPG = require("main.upgrades")
local DICE = require("main.dice")
local TALK = require("main.talk")
local BACKGROUND = require("main.ship.background")
local SHIP = require("main.ship.ship_layout")

local focus = {action = true}

local planet = FPlanet.generatePlanet("Frontier", true)
local mission = {}

crew = {}
crew[0] = {skills = {medic = 0, mech = 0, gunner = 0, comms = 0, pilot = 0, fight = 0}}

cargo = {fuel = 5, rations = 20, money = 1000}

local dialog = {}

local fuelBought = CON.MAXFUEL - cargo.fuel
local rationsBought = CON.MAXRATIONS - cargo.rations
local totalPrice

local statsOrder = {pilot = 1, mech = 2, comms = 3, gunner = 4, medic = 5, fight = 6}

local selection
local currentMission
local selector = {}
local cursor_position = {x = 0, y = 0}

local tooltip
local tooltip_visible = false

local speechResult = {
	reply1 = {},
	reply2 = {},
	reply3 = {}
}

local function getSelectorText(thing)
	thing = thing or selector.thing
	local type = type(selector.thing)
	if type == "string" then
		return SHIP[thing].name
	elseif type == "number" then
		return text.getName(crew[thing])
	end
end


local function updateDialog(dialogID)
	if dialogID == "buy" then
		gui.set_text(dialog.buy.lbl.fuelAmount, fuelBought)
		gui.set_text(dialog.buy.lbl.rationsAmount, rationsBought)
		totalPrice = planet.price.fuel * fuelBought + planet.price.rations * rationsBought
		gui.set_text(dialog.buy.lbl.totalPrice, totalPrice)
		if totalPrice > cargo.money then
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_DISABLED)
		else
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_ENABLED)
		end
	elseif dialogID == "recruit" then
		for key, val in ipairs(dialog.recruit.ico) do
			for k, v in pairs(val) do
				gui.delete_node(v)
			end
		end
		dialog.recruit.ico = {}
		if #planet.recruits == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.recruit.btn["recruit"..x], false)
				gui.set_enabled(dialog.recruit.btn["skills"..x], false)
				gui.set_enabled(dialog.recruit.btn["about"..x], false)
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, true)
		else
			for x = 1, 5 do
				if #planet.recruits >= x then
					gui.set_text(dialog.recruit.btn["recruit"..x], text.getName(planet.recruits[x]))
					gui.set_enabled(dialog.recruit.btn["recruit"..x], true)
					table.insert(dialog.recruit.ico, FACE.drawFace(planet.recruits[x].face, vmath.vector3(-180, 90 - 20 * x, 0), 1))
					gui.set_enabled(dialog.recruit.btn["skills"..x], true)
					gui.set_enabled(dialog.recruit.btn["about"..x], true)
				else
					gui.set_enabled(dialog.recruit.btn["recruit"..x], false)
					gui.set_enabled(dialog.recruit.btn["skills"..x], false)
					gui.set_enabled(dialog.recruit.btn["about"..x], false)
				end
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, false)
			for key, val in ipairs(dialog.recruit.ico) do
				for k, v in pairs(val) do
					gui.set_parent(v, dialog.recruit.frame)
				end
				gui.move_above(val.hair, val.forehead)
			end
		end
		if selection then
			gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "info" then
		gui.set_text(dialog.info.lbl.fuel, "FUEL: "..cargo.fuel)
		gui.set_text(dialog.info.lbl.rations, "RATIONS: "..cargo.rations)
		gui.set_text(dialog.info.lbl.money, "CREDITS: "..cargo.money)
		gui.set_text(dialog.info.lbl.region, planet.region)
		gui.set_text(dialog.info.lbl.settlement, planet.settlement)
		gui.set_text(dialog.info.lbl.government, planet.government)
	elseif dialogID == "crew" then
		if selection then gui.set_color(dialog.crew.btn[selection], CON.COLOR_DEFAULT) end
		selection = nil
		dialog.crew.selection = {}		-- used to assign crewembers to different dialogs
		local iconPos = {
			pilot = vmath.vector3(86, -36, 0),
			comms = vmath.vector3(86, -56, 0),
			mech = vmath.vector3(86, -76, 0),
			gunner = vmath.vector3(86, -96, 0),
			medic = vmath.vector3(86, -116, 0)
		}
		for key, val in ipairs(dialog.crew.ico) do
			for k, v in pairs(val) do
				gui.delete_node(v)
			end
		end
		dialog.crew.ico = {}
		for key, val in pairs(dialog.crew.btn) do
			if string.sub(key, 1, 4) == "crew" then
				gui.set_enabled(val, false)
			end
		end
		gui.set_enabled(dialog.crew.btn.pilot, false)
		gui.set_enabled(dialog.crew.btn.comms, false)
		gui.set_enabled(dialog.crew.btn.mech, false)
		gui.set_enabled(dialog.crew.btn.medic, false)
		gui.set_enabled(dialog.crew.btn.gunner, false)
		local y = 1
		for key, val in ipairs(crew) do
			if val.role then
				gui.set_text(dialog.crew.btn[val.role], text.getName(val))
				gui.set_enabled(dialog.crew.btn[val.role], true)
				table.insert(dialog.crew.ico, FACE.drawFace(val.face, iconPos[val.role], 1))
				dialog.crew.selection[val.role] = key
			else
				gui.set_text(dialog.crew.btn["crew"..y], text.getName(val))
				gui.set_enabled(dialog.crew.btn["crew"..y], true)
				table.insert(dialog.crew.ico, FACE.drawFace(val.face, vmath.vector3(16, -116 - 20 * y, 0), 1))
				dialog.crew.selection["crew"..y] = key
				y = y + 1
			end
		end
		for key, val in ipairs(dialog.crew.ico) do
			for k, v in pairs(val) do
				gui.set_parent(v, dialog.crew.frame)
			end
			gui.move_above(val.hair, val.forehead)
		end
	elseif dialogID == "travel" then
		gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.exploreCore, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreFrontier, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreRim, CON.COLOR_DEFAULT)
		for key, val in ipairs(mission) do
			if val.target == "Core" then
				gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DEFAULT)
			elseif val.target == "Frontier" then
				gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DEFAULT)
			elseif val.target == "Rim" then
				gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DEFAULT)
			end
		end
		if selection then
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DEFAULT)
			gui.set_color(selection, CON.COLOR_SELECTION)
		else
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "work" then
		if #planet.missions == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.work.btn[x].type, false)
				gui.set_enabled(dialog.work.btn[x].target, false)
				gui.set_enabled(dialog.work.btn[x].wage, false)
			end
			gui.set_enabled(dialog.work.lbl.none, true)
		else
			for x = 1, 5 do
				if #planet.missions >= x then
					gui.set_text(dialog.work.btn[x].type, planet.missions[x].type)
					gui.set_text(dialog.work.btn[x].target, planet.missions[x].target)
					gui.set_text(dialog.work.btn[x].wage, planet.missions[x].wage)
					gui.set_enabled(dialog.work.btn[x].type, true)
					gui.set_enabled(dialog.work.btn[x].target, true)
					gui.set_enabled(dialog.work.btn[x].wage, true)
				else
					gui.set_enabled(dialog.work.btn[x].type, false)
					gui.set_enabled(dialog.work.btn[x].target, false)
					gui.set_enabled(dialog.work.btn[x].wage, false)
				end
			end
			gui.set_enabled(dialog.work.lbl.none, false)
		end
		if selection then
			gui.set_color(dialog.work.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.work.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "missions" then
		for x = 1, 5 do
			if x > #currentMission then
				gui.set_enabled(dialog.missions.btn[x].type, false)
				gui.set_enabled(dialog.missions.btn[x].target, false)
				gui.set_enabled(dialog.missions.btn[x].wage, false)
			else
				gui.set_text(dialog.missions.btn[x].type, mission[currentMission[x]].type)
				gui.set_text(dialog.missions.btn[x].target, mission[currentMission[x]].target)
				gui.set_text(dialog.missions.btn[x].wage, mission[currentMission[x]].wage)
				gui.set_enabled(dialog.missions.btn[x].type, true)
				gui.set_enabled(dialog.missions.btn[x].target, true)
				gui.set_enabled(dialog.missions.btn[x].wage, true)
			end
		end
		if selection then
			gui.set_color(dialog.missions.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.missions.btn.confirm, CON.COLOR_DISABLED)
		end
		gui.set_enabled(dialog.missions.lbl.none, false)
	end
end

local function travel(target, mission)
	cargo.fuel = cargo.fuel - 1
	cargo.rations = cargo.rations - #crew
	planet = FPlanet.generatePlanet(target)
	updateDialog("info")
end

local function checkMission(target)
	local missionList = {}
	for key, val in ipairs(mission) do
		if val.target == target then
			table.insert(missionList, key)
		end
	end
	return missionList
end

function init(self)

	msg.post(".", "acquire_input_focus")
	
	dialog.travel = DH.newDialog("travel")
	dialog.recruit = DH.newDialog("recruit")
	dialog.buy = DH.newDialog("buy")
	dialog.action = DH.newDialog("action", true)
	dialog.info = DH.newDialog("info", true)
	dialog.warning = DH.newDialog("warning")
	dialog.crew = DH.newDialog("crew", true)
	dialog.work = DH.newDialog("work")
	dialog.missions = DH.newDialog("work")
	dialog.speech = DH.newDialog("speech")
	gui.set_text(dialog.missions.lbl.none, "There are no ongoing jobs.")
	gui.set_text(dialog.missions.lbl.title, "CHOOSE A MISSION")
	
	updateDialog("info")

	for x = 1, 5 do
		table.insert(crew, FCrew.generateCrew())
		text.setNameAvailability(crew[#crew].name.gender, crew[#crew].name.key, true)
		crew[#crew].go = factory.create("/ship#spawn_crew", vmath.vector3(math.random(140, 240), 64, 0.1), nil, {crew = #crew, level = 2})
	end
	updateDialog("crew")

	tooltip = gui.new_text_node(vmath.vector3(0, 0, 0), "")
	gui.set_enabled(tooltip, false)
	gui.set_pivot(tooltip, gui.PIVOT_W)
	
	BACKGROUND.show(hash("space"))
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		for k in pairs(focus) do
			if k == "action" then
				for key, val in pairs(dialog.action.btn) do
					if gui.pick_node(val, action.x, action.y) then
						updateDialog("crew")
						selection = nil
						if key == "buy" then
							fuelBought = CON.MAXFUEL - cargo.fuel
							rationsBought = CON.MAXRATIONS - cargo.rations
							gui.set_text(dialog.buy.lbl.fuelPrice, "@ "..planet.price.fuel.." cr/unit.")
							gui.set_text(dialog.buy.lbl.rationsPrice, "@ "..planet.price.rations.." cr/unit.")
							gui.set_enabled(dialog.buy.frame, true)
							focus = {buy = true}
							updateDialog("buy")
						elseif key == "recruit" then
							gui.set_enabled(dialog.recruit.frame, true)
							focus = {recruit = true}
							updateDialog("recruit")
						elseif key == "travel" then
							gui.set_enabled(dialog.travel.frame, true)
							focus = {travel = true}
							updateDialog("travel")
						elseif key == "work" then
							gui.set_enabled(dialog.work.frame, true)
							focus = {work = true}
							updateDialog("work")
						end
					end
				end
				if selector.thing then
					if type(selector.thing) == "number" then
						if selection then gui.set_color(dialog.crew.btn[selection], CON.COLOR_DEFAULT) end
						for key, val in pairs(dialog.crew.selection) do
							if val == selector.thing then
								selection = key
								gui.set_color(dialog.crew.btn[selection], CON.COLOR_SELECTION)
								break
							end
						end
					else
						--start makign this work next
					end
				else
					for key, val in pairs(dialog.crew.btn) do
						if gui.pick_node(val, action.x, action.y) and gui.is_enabled(val) then
							for x = 1, 9 do
								if key == "crew"..x then
									if selection then gui.set_color(dialog.crew.btn[selection], CON.COLOR_DEFAULT) end
									selection = "crew"..x
									gui.set_color(val, CON.COLOR_SELECTION)
								end
							end
							if key == "pilot" or key == "mech" or key == "comms" or key == "medic" or key == "gunner" then
								if selection then gui.set_color(dialog.crew.btn[selection], CON.COLOR_DEFAULT) end
								selection = key
								gui.set_color(val, CON.COLOR_SELECTION)
							end
							if selection then
								if key == "pilotR" then
									if dialog.crew.selection.pilot then crew[dialog.crew.selection.pilot].role = nil end
									crew[dialog.crew.selection[selection]].role = "pilot"
									msg.post(crew[dialog.crew.selection[selection]].go, "move", {target = "COCKPIT"})
									updateDialog("crew")
								elseif key == "commsR" then
									if dialog.crew.selection.comms then crew[dialog.crew.selection.comms].role = nil end
									crew[dialog.crew.selection[selection]].role = "comms"
									msg.post(crew[dialog.crew.selection[selection]].go, "move", {target = "COMMS"})
									updateDialog("crew")
								elseif key == "mechR" then
									if dialog.crew.selection.mech then crew[dialog.crew.selection.mech].role = nil end
									crew[dialog.crew.selection[selection]].role = "mech"
									msg.post(crew[dialog.crew.selection[selection]].go, "move", {target = "ENGINE2"})
									updateDialog("crew")
								elseif key == "medicR" then
									if dialog.crew.selection.medic then crew[dialog.crew.selection.medic].role = nil end
									crew[dialog.crew.selection[selection]].role = "medic"
									msg.post(crew[dialog.crew.selection[selection]].go, "move", {target = "BUNK4"})
									updateDialog("crew")
								elseif key == "gunnerR" then
									if dialog.crew.selection.gunner then crew[dialog.crew.selection.gunner].role = nil end
									crew[dialog.crew.selection[selection]].role = "gunner"
									msg.post(crew[dialog.crew.selection[selection]].go, "move", {target = "GUN"})
									updateDialog("crew")
								end
							end
						end
					end
				end
			elseif k == "buy" then
				for key, val in pairs(dialog.buy.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							gui.set_enabled(dialog.buy.frame, false)
							focus = {action = true}
						elseif key == "fuelPlus" then
							if fuelBought + cargo.fuel < CON.MAXFUEL then
								fuelBought = fuelBought + 1
								updateDialog("buy")
							end
						elseif key == "fuelMinus" then
							if fuelBought > 0 then
								fuelBought = fuelBought - 1
								updateDialog("buy")
							end
						elseif key == "rationsPlus" then
							if rationsBought + cargo.rations < CON.MAXRATIONS then
								rationsBought = rationsBought + 1
								updateDialog("buy")
							end
						elseif key == "rationsMinus" then
							if rationsBought > 0 then
								rationsBought = rationsBought - 1
								updateDialog("buy")
							end
						elseif key == "confirm" then
							if totalPrice <= cargo.money then
								cargo.money = cargo.money - totalPrice
								cargo.fuel = cargo.fuel + fuelBought
								cargo.rations = cargo.rations + rationsBought
								updateDialog("info")
								gui.set_enabled(dialog.buy.frame, false)
								focus = {action = true}
							end
						end
					end
				end
			elseif k == "recruit" then
				for key, val in pairs(dialog.recruit.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							if selection then gui.set_color(dialog.recruit.btn["recruit"..selection], CON.COLOR_DEFAULT) end
							selection = nil
							gui.set_enabled(dialog.recruit.frame, false)
							focus = {action = true}
						elseif key == "confirm" and selection then
							if selection then gui.set_color(dialog.recruit.btn["recruit"..selection], CON.COLOR_DEFAULT) end
							if #crew >= CON.MAXCREW then
								selection = nil
								gui.set_enabled(dialog.recruit.frame, false)
								gui.set_text(dialog.warning.lbl.text, "You can't have more than "..CON.MAXCREW.." crew!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							else
								table.insert(crew, planet.recruits[selection])
								crew[#crew].go = factory.create("/ship#spawn_crew", vmath.vector3(math.random(140, 240), 64, 0.1), nil, {crew = #crew, level = 2})
								table.remove(planet.recruits, selection)
								selection = nil
								updateDialog("recruit")
								updateDialog("crew")
							end
						else
							for x = 1, 5 do
								if key == "recruit"..x and gui.is_enabled(val) then
									if selection then gui.set_color(dialog.recruit.btn["recruit"..selection], CON.COLOR_DEFAULT) end
									selection = x
									gui.set_color(val, CON.COLOR_SELECTION)
									gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_ENABLED)
								elseif key == "skills"..x and gui.is_enabled(val) then
									gui.set_enabled(dialog.recruit.frame, false)
									TALK.openDialog(dialog.speech, planet.recruits[x], TALK.skills(planet.recruits[x]), nil , "OK")
									speechResult.reply2 = {"close", "recruit"}
									focus = {speech = true}
								elseif key == "about"..x and gui.is_enabled(val) then
									gui.set_enabled(dialog.recruit.frame, false)
									TALK.openDialog(dialog.speech, planet.recruits[x], TALK.intro(planet.recruits[x]), nil , "OK")
									speechResult.reply2 = {"close", "recruit"}
									focus = {speech = true}
								end
							end
						end
					end
				end
			elseif k == "travel" then
				for key, val in pairs(dialog.travel.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "confirm" and selection then
							gui.set_enabled(dialog.travel.frame, false)
							if cargo.fuel < 1 then
								gui.set_text(dialog.warning.lbl.text, "You don't have enough fuel!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							elseif cargo.rations < #crew then
								gui.set_text(dialog.warning.lbl.text, "You don't have enough rations!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							elseif FCrew.getRole("pilot") == 0 then
								gui.set_text(dialog.warning.lbl.text, "You must assign a pilot!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							else
								local chosenTarget
								if selection == dialog.travel.btn.exploreCore then
									travel("Core")
									focus = {action = true}
								elseif selection == dialog.travel.btn.exploreFrontier then
									travel("Frontier")
									focus = {action = true}
								elseif selection == dialog.travel.btn.exploreRim then
									travel("Rim")
									focus = {action = true}
								elseif selection == dialog.travel.btn.missionCore then
									chosenTarget = "Core"
								elseif selection == dialog.travel.btn.missionFrontier then
									chosenTarget = "Frontier"
								elseif selection == dialog.travel.btn.missionRim then
									chosenTarget = "Rim"
								end
								if chosenTarget then
									currentMission = checkMission(chosenTarget)
									if #currentMission == 1 then
										travel(chosenTarget)
										gui.set_text(dialog.warning.lbl.text, "Job completed. You earned "..mission[currentMission[1]].wage)
										gui.set_enabled(dialog.warning.frame, true)
										focus = {warning = true}
										cargo.money = cargo.money + mission[currentMission[1]].wage
										updateDialog("info")
										table.remove(mission, currentMission[1])
									else
										updateDialog("missions")
										selection = nil
										gui.set_enabled(dialog.missions.frame, true)
										focus = {missions = true}
									end
								end
							end
							selection = nil
						elseif key == "cancel" then
							selection = nil
							gui.set_enabled(dialog.travel.frame, false)
							focus = {action = true}
						elseif key == "exploreCore" or key == "exploreFrontier" or key == "exploreRim" then
							selection = val
							updateDialog("travel")
						elseif (key == "missionCore" or key == "missionFrontier" or key == "missionRim") and gui.get_color(val) == CON.COLOR_DEFAULT then
							selection = val
							updateDialog("travel")
						end
					end
				end
			elseif k == "work" then
				for key, val in pairs(dialog.work.btn) do
					if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							if selection then
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = nil
							gui.set_enabled(dialog.work.frame, false)
							focus = {action = true}
						elseif key == "confirm" and selection then
							if #mission > 4 then
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
								selection = nil
								gui.set_enabled(dialog.work.frame, false)
								gui.set_text(dialog.warning.lbl.text, "You have too many missions already!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							else
								table.insert(mission, planet.missions[selection])
								table.remove(planet.missions, selection)
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
								selection = nil
								gui.set_enabled(dialog.work.frame, false)
								focus = {action = true}
							end
						end
					elseif type(val) == "table" then
						if (gui.pick_node(val.type, action.x, action.y) or gui.pick_node(val.target, action.x, action.y) or gui.pick_node(val.wage, action.x, action.y)) and gui.is_enabled(val.type) then
							if selection then
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = key
							gui.set_color(val.type, CON.COLOR_SELECTION)
							gui.set_color(val.target, CON.COLOR_SELECTION)
							gui.set_color(val.wage, CON.COLOR_SELECTION)
							gui.set_color(dialog.work.btn.confirm, CON.COLOR_ENABLED)
						end
					end
				end
			elseif k == "missions" then
				for key, val in pairs(dialog.missions.btn) do
					if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							if selection then
								gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = nil
							updateDialog("travel")
							gui.set_enabled(dialog.missions.frame, false)
							gui.set_enabled(dialog.travel.frame, true)
							focus = {travel = true}
						elseif key == "confirm" and selection then
							currentMission = {currentMission[selection]}
							gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
							selection = nil
							gui.set_enabled(dialog.missions.frame, false)
							travel(mission[currentMission[1]].target)
							gui.set_text(dialog.warning.lbl.text, "Job completed. You earned "..mission[currentMission[1]].wage)
							gui.set_enabled(dialog.warning.frame, true)
							focus = {warning = true}
							cargo.money = cargo.money + mission[currentMission[1]].wage
							updateDialog("info")
							table.remove(mission, currentMission[1])
						end
					elseif type(val) == "table" then
						if (gui.pick_node(val.type, action.x, action.y) or gui.pick_node(val.target, action.x, action.y) or gui.pick_node(val.wage, action.x, action.y)) and gui.is_enabled(val.type) then
							if selection then
								gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = key
							gui.set_color(val.type, CON.COLOR_SELECTION)
							gui.set_color(val.target, CON.COLOR_SELECTION)
							gui.set_color(val.wage, CON.COLOR_SELECTION)
							gui.set_color(dialog.missions.btn.confirm, CON.COLOR_ENABLED)
						end
					end
				end
			elseif k == "speech" then
				for key, val in pairs(dialog.speech.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if speechResult[key] then
							for k, v in ipairs(speechResult[key]) do
								if v == "close" then
									gui.set_enabled(dialog.speech.frame, false)
								elseif v == "recruit" then
									updateDialog("recruit")
									gui.set_enabled(dialog.recruit.frame, true)
									focus = {recruit = true}
								end
							end
							speechResult = {}
						end
					end
				end
			elseif k == "warning" then
				gui.set_enabled(dialog.warning.frame, false)
				focus = {action = true}
			end
		end
	elseif action_id == hash("enter") and action.pressed then
		
	else
		cursor_position.x = action.x; cursor_position.y = action.y
		if tooltip_visible then
			gui.set_position(tooltip, vmath.vector3(action.x + 16, action.y - 16, 0))
		end
		local _selector
		for key, val in pairs(SHIP) do
			if val.pos then
				if action.x > val.pos.x and action.x < val.pos.x + val.size.x and action.y > val.pos.y and action.y < val.pos.y + val.size.y then
					_selector = val
					_thing = key
				end
			end
		end
		for key, val in pairs(crew) do
			if val.pos then
				if action.x > val.pos.x and action.x < val.pos.x + 40 and action.y > val.pos.y and action.y < val.pos.y + 78 then
					_selector = val
					_thing = key
				end
			end
		end
		
		for k in pairs(focus) do
			if k == "action" then
				if selector.frame then gui.delete_node(selector.frame); selector = {} end
				if _selector then
					local size = _selector.size or vmath.vector3(40, 78, 0)
					selector.frame = gui.new_box_node(_selector.pos, size)
					gui.set_pivot(selector.frame, gui.PIVOT_SW)
					gui.set_texture(selector.frame, hash("selection"))
					gui.set_slice9(selector.frame, vmath.vector4(1, 1, 2, 2))
					selector.thing = _thing
					gui.set_text(tooltip, getSelectorText())
					tooltip_visible = true
					gui.set_enabled(tooltip, true)
					gui.set_position(tooltip, vmath.vector3(action.x + 16, action.y - 16, 0))
				else
					tooltip_visible = false
					gui.set_enabled(tooltip, false)
				end
				
				for menu in pairs(focus) do
					for key, val in pairs(dialog[menu].btn) do
						if type(val) == "table" then
							for k_, v_ in pairs(val) do
								if gui.pick_node(v_, action.x, action.y) then
									gui.set_shadow(v_, CON.COLOR_SELECTION)
									gui.set_outline(v_, CON.COLOR_SELECTION)
								else
									gui.set_shadow(v_, vmath.vector4(0, 0, 0, 0))
									gui.set_outline(v_, vmath.vector4(0, 0, 0, 0))
								end
							end
						else
							if gui.pick_node(val, action.x, action.y) then
								gui.set_shadow(val, CON.COLOR_SELECTION)
								gui.set_outline(val, CON.COLOR_SELECTION)
							else
								gui.set_shadow(val, vmath.vector4(0, 0, 0, 0))
								gui.set_outline(val, vmath.vector4(0, 0, 0, 0))
							end
						end
					end
				end
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_position") then
		crew[message.crew].pos = message.pos
		crew[message.crew].pos.x = crew[message.crew].pos.x - 20
		if cursor_position.x > message.pos.x and cursor_position.x < message.pos.x + 40 and cursor_position.y > message.pos.y and cursor_position.y < message.pos.y + 78 then
			if selector.frame then gui.delete_node(selector.frame); selector = {} end
			selector.frame = gui.new_box_node(message.pos, vmath.vector3(40, 78, 0))
			gui.set_pivot(selector.frame, gui.PIVOT_SW)
			gui.set_texture(selector.frame, hash("selection"))
			gui.set_slice9(selector.frame, vmath.vector4(1, 1, 2, 2))
			selector.thing = message.crew
		elseif selector.thing == message.crew then
			gui.delete_node(selector.frame); selector = {}
		end
	end
end