local text = require("main.text")
local FPlanet = require("main.planet")
local COLOR_SELECTION = vmath.vector4(0.5, 1, 0.5, 1)
local COLOR_BUTTONS = vmath.vector4(0.5, 0.75, 1, 1)
local COLOR_DISABLED = vmath.vector4(0.4, 0.4, 0.4, 1)
local COLOR_ENABLED = vmath.vector4(0.5, 1, 0.7, 1)
local COLOR_DESELECTED = vmath.vector4(1, 1, 1, 1)

local MAXFUEL = 5
local MAXRATIONS = 20

local UIFocus = "main"

local planet = FPlanet.generatePlanet("Frontier", true)

local btn = {
	crew = {},
	role = {},
	actions = {}
}

local lbl = {
	crewStats = {
		skills = {},
		skillTitle = {}
	},
	cargo = {},
	planet = {}
}

local dialog = {
	buy = {},
	recruit = {}
}

local fuelBought = MAXFUEL - cargo.fuel
local rationsBought = MAXRATIONS - cargo.rations
local totalPrice

local statsOrder = {pilot = 1, mech = 2, comms = 3, gunnery = 4, medic = 5, fight = 6}

local selectedCrew
local selectedRecruit

function init(self)
	dialog.recruit.frame = gui.new_box_node(vmath.vector3(640, 360, 0), vmath.vector3(400, 200, 0))
	dialog.recruit.label = gui.new_text_node(vmath.vector3(0, 86, 0), "RECRUIT")
	dialog.recruit.nobody = gui.new_text_node(vmath.vector3(0, 0, 0), "There are no recruits available.")
	dialog.recruit.hire = gui.new_text_node(vmath.vector3(-50, -70, 0), "HIRE")
	dialog.recruit.cancel = gui.new_text_node(vmath.vector3(50, -70, 0), "CLOSE")
	
	for x = 1, 5 do
		dialog.recruit[x] = {}
		dialog.recruit[x].face = gui.new_box_node(vmath.vector3(-180, 90 - 20 * x, 0), vmath.vector3(16, 16, 0))
		gui.set_texture(dialog.recruit[x].face, hash("faces"))
		gui.set_parent(dialog.recruit[x].face, dialog.recruit.frame)
		dialog.recruit[x].name = gui.new_text_node(vmath.vector3(-160, 90 - 20 * x, 0), "Recruit name")
		gui.set_parent(dialog.recruit[x].name, dialog.recruit.frame)
		gui.set_pivot(dialog.recruit[x].name, gui.PIVOT_W)
	end
	for key, val in pairs(dialog.recruit) do
		if type(val) == "userdata" then
			if key == "frame" then
				gui.set_scale(val, vmath.vector3(2, 2, 1))
				gui.set_color(val, vmath.vector4(0.2, 0.2, 0.2, 1))
				gui.set_enabled(val, false)
			else
				gui.set_parent(val, dialog.recruit.frame)
			end
			gui.set_layer(val, "dialog")
		end
	end

	
	dialog.buy.frame = gui.new_box_node(vmath.vector3(640, 360, 0), vmath.vector3(400, 200, 0))
	dialog.buy.label = gui.new_text_node(vmath.vector3(0, 86, 0), "RESTOCK")
	gui.set_color(dialog.buy.label, COLOR_BUTTONS)
	dialog.buy.fuelLbl = gui.new_text_node(vmath.vector3(-150, 70, 0), "FUEL: ")
	dialog.buy.fuelAmount = gui.new_text_node(vmath.vector3(-50, 70, 0), fuelBought)
	dialog.buy.fuelPlus = gui.new_text_node(vmath.vector3(-65, 70, 0), "+")
	dialog.buy.fuelMinus = gui.new_text_node(vmath.vector3(-35, 70, 0), "-")
	dialog.buy.fuelPrice = gui.new_text_node(vmath.vector3(100, 70, 0), "@ "..planet.price.fuel.." cr/unit.")
	dialog.buy.rationsLbl = gui.new_text_node(vmath.vector3(-150, 50, 0), "RATIONS: ")
	dialog.buy.rationsAmount = gui.new_text_node(vmath.vector3(-50, 50, 0), rationsBought)
	dialog.buy.rationsPlus = gui.new_text_node(vmath.vector3(-65, 50, 0), "+")
	dialog.buy.rationsMinus = gui.new_text_node(vmath.vector3(-35, 50, 0), "-")
	dialog.buy.rationsPrice = gui.new_text_node(vmath.vector3(100, 50, 0), "@ "..planet.price.rations.." cr/unit.")

	dialog.buy.totalLbl = gui.new_text_node(vmath.vector3(150, -50, 0), "TOTAL")
	dialog.buy.totalPrice = gui.new_text_node(vmath.vector3(150, -70, 0), planet.price.fuel * fuelBought + planet.price.rations * rationsBought)

	dialog.buy.confirm = gui.new_text_node(vmath.vector3(-50, -70, 0), "PURCHASE")
	dialog.buy.cancel = gui.new_text_node(vmath.vector3(50, -70, 0), "CANCEL")
	
	for key, val in pairs(dialog.buy) do
		if key == "frame" then
			gui.set_scale(val, vmath.vector3(2, 2, 1))
			gui.set_color(val, vmath.vector4(0.2, 0.2, 0.2, 1))
			gui.set_enabled(val, false)
		else
			gui.set_parent(val, dialog.buy.frame)
		end
		gui.set_layer(val, "dialog")
		
	end
	
	lbl.crewStats.title = gui.new_text_node(vmath.vector3(250, 700, 0), "SKILLS:")
	gui.set_pivot(lbl.crewStats.title, gui.PIVOT_W)
	lbl.crewStats.skillTitle.pilot = gui.new_text_node(vmath.vector3(250, 680, 0), "PILOT")
	gui.set_pivot(lbl.crewStats.skillTitle.pilot, gui.PIVOT_W)
	lbl.crewStats.skillTitle.mech = gui.new_text_node(vmath.vector3(250, 660, 0), "MECHANICS")
	gui.set_pivot(lbl.crewStats.skillTitle.mech, gui.PIVOT_W)
	lbl.crewStats.skillTitle.comms = gui.new_text_node(vmath.vector3(250, 640, 0), "COMMS")
	gui.set_pivot(lbl.crewStats.skillTitle.comms, gui.PIVOT_W)
	lbl.crewStats.skillTitle.gunnery = gui.new_text_node(vmath.vector3(250, 620, 0), "GUNNERY")
	gui.set_pivot(lbl.crewStats.skillTitle.gunnery, gui.PIVOT_W)
	lbl.crewStats.skillTitle.medic = gui.new_text_node(vmath.vector3(250, 600, 0), "MEDICINE")
	gui.set_pivot(lbl.crewStats.skillTitle.medic, gui.PIVOT_W)
	lbl.crewStats.skillTitle.fight = gui.new_text_node(vmath.vector3(250, 580, 0), "FIGHTING")
	gui.set_pivot(lbl.crewStats.skillTitle.fight, gui.PIVOT_W)

	lbl.cargo.fuel = gui.new_text_node(vmath.vector3(1260, 700, 0), "FUEL: "..cargo.fuel)
	gui.set_pivot(lbl.cargo.fuel, gui.PIVOT_E)
	lbl.cargo.rations = gui.new_text_node(vmath.vector3(1260, 680, 0), "RATIONS: "..cargo.rations)
	gui.set_pivot(lbl.cargo.rations, gui.PIVOT_E)
	lbl.cargo.money = gui.new_text_node(vmath.vector3(1260, 660, 0), "CREDITS: "..cargo.money)
	gui.set_pivot(lbl.cargo.money, gui.PIVOT_E)
	--	medic	mech 	gunnery	comms 	pilot 	fight = normalDist(2, true)

	btn.actions.restock = gui.new_text_node(vmath.vector3(325, 100, 0), "RESTOCK")
	gui.set_color(btn.actions.restock, COLOR_BUTTONS)
	btn.actions.repair = gui.new_text_node(vmath.vector3(400, 100, 0), "REPAIR")
	gui.set_color(btn.actions.repair, COLOR_BUTTONS)
	btn.actions.upgrade = gui.new_text_node(vmath.vector3(475, 100, 0), "UPGRADE")
	gui.set_color(btn.actions.upgrade, COLOR_BUTTONS)
	btn.actions.recruit = gui.new_text_node(vmath.vector3(550, 100, 0), "RECRUIT")
	gui.set_color(btn.actions.recruit, COLOR_BUTTONS)
	btn.actions.work = gui.new_text_node(vmath.vector3(625, 100, 0), "FIND WORK")
	gui.set_color(btn.actions.work, COLOR_BUTTONS)
	btn.actions.leave = gui.new_text_node(vmath.vector3(700, 100, 0), "LEAVE")
	gui.set_color(btn.actions.leave, COLOR_BUTTONS)

	lbl.planet.region = gui.new_text_node(vmath.vector3(1000, 700, 0), planet.region)
	lbl.planet.settlement = gui.new_text_node(vmath.vector3(1000, 680, 0), planet.settlement)
	lbl.planet.government = gui.new_text_node(vmath.vector3(1000, 660, 0), planet.government)
	
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("updateCrew") then
		for key, val in pairs(btn.crew) do
			gui.delete_node(val)
		end
		local y = 1
		for key, val in ipairs(crew) do
			if val.active then
				btn.crew[key] = gui.new_text_node(vmath.vector3(50, 700 - 20 * y, 0), y..") "..text.nameList[val.name.gender][val.name.key].." "..val.role)
				gui.set_pivot(btn.crew[key], gui.PIVOT_W)
			end
			y = y + 1
		end
		if selectedCrew then gui.set_color(btn.crew[selectedCrew], COLOR_SELECTION) end
	elseif message_id == hash("updateCrewDetail") and selectedCrew then
		for key, val in pairs(lbl.crewStats.skills) do
			gui.delete_node(val)
		end
		for key, val in pairs(crew[selectedCrew].skills) do
			local y = statsOrder[key]
			lbl.crewStats.skills[key] = gui.new_text_node(vmath.vector3(350, 700 - 20 * y, 0), text.skillText(val * 10).." "..math.floor(val * 20) / 2)
			gui.set_pivot(lbl.crewStats.skills[key], gui.PIVOT_W)
		end
		for key, val in pairs(btn.role) do
			gui.delete_node(val)
		end
		btn.role.pilot = gui.new_text_node(vmath.vector3(200, 550, 0), "PILOT")
		gui.set_color(btn.role.pilot, COLOR_BUTTONS)
		btn.role.comms = gui.new_text_node(vmath.vector3(275, 550, 0), "COMMS")
		gui.set_color(btn.role.comms, COLOR_BUTTONS)
		btn.role.mech = gui.new_text_node(vmath.vector3(350, 550, 0), "MECHANIC")
		gui.set_color(btn.role.mech, COLOR_BUTTONS)
		btn.role.medic = gui.new_text_node(vmath.vector3(425, 550, 0), "DOCTOR")
		gui.set_color(btn.role.medic, COLOR_BUTTONS)
		btn.role.gunner = gui.new_text_node(vmath.vector3(500, 550, 0), "GUNNER")
		gui.set_color(btn.role.gunner, COLOR_BUTTONS)
		gui.set_layer(btn.role.gunner, "main")
	elseif message_id == hash("updateCargo") then
		gui.set_text(lbl.cargo.fuel, "FUEL: "..cargo.fuel)
		gui.set_text(lbl.cargo.rations, "RATIONS: "..cargo.rations)
		gui.set_text(lbl.cargo.money, "CREDITS: "..cargo.money)
	elseif message_id == hash("updateRestock") then
		gui.set_text(dialog.buy.fuelAmount, fuelBought)
		gui.set_text(dialog.buy.rationsAmount, rationsBought)
		totalPrice = planet.price.fuel * fuelBought + planet.price.rations * rationsBought
		gui.set_text(dialog.buy.totalPrice, totalPrice)
		if totalPrice > cargo.money then
			gui.set_color(dialog.buy.confirm, COLOR_DISABLED)
		else
			gui.set_color(dialog.buy.confirm, COLOR_ENABLED)
		end
	elseif message_id == hash("updateRecruit") then
		if #planet.recruits == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.recruit[x].face, false)
				gui.set_enabled(dialog.recruit[x].name, false)
			end
			gui.set_enabled(dialog.recruit.nobody, true)
		else
			for x = 1, 5 do
				if #planet.recruits >= x then
					gui.set_text(dialog.recruit[x].name, text.nameList[planet.recruits[x].name.gender][planet.recruits[x].name.key])
				else
					gui.set_enabled(dialog.recruit[x].face, false)
					gui.set_enabled(dialog.recruit[x].name, false)
				end
			end
			gui.set_enabled(dialog.recruit.nobody, false)
		end
		if selectedRecruit then
			gui.set_color(dialog.recruit.hire, COLOR_ENABLED)
		else
			gui.set_color(dialog.recruit.hire, COLOR_DISABLED)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if UIFocus == "main" then
			for key, val in pairs(btn.crew) do
				if gui.pick_node(val, action.x, action.y) then
					if selectedCrew then gui.set_color(btn.crew[selectedCrew], COLOR_DESELECTED) end
					selectedCrew = key
					gui.set_color(btn.crew[selectedCrew], COLOR_SELECTION)
					msg.post(".", "updateCrewDetail")
				end
			end
			for key, val in pairs(btn.role) do
				if gui.pick_node(val, action.x, action.y) then
					if role[key] == selectedCrew then
						crew[selectedCrew].role = ""
						role[key] = nil
					else
						if role[key] then
							crew[role[key]].role = ""
						end
						crew[selectedCrew].role = key
						role[key] = selectedCrew
					end
					msg.post(".", "updateCrew")
				end
			end
			for key, val in pairs(btn.actions) do
				if gui.pick_node(val, action.x, action.y) then
					if key == "restock" then
						fuelBought = MAXFUEL - cargo.fuel
						rationsBought = MAXRATIONS - cargo.rations
						gui.set_text(dialog.buy.fuelPrice, "@ "..planet.price.fuel.." cr/unit.")
						gui.set_text(dialog.buy.rationsPrice, "@ "..planet.price.rations.." cr/unit.")
						gui.set_enabled(dialog.buy.frame, true)
						UIFocus = "restock"
						msg.post(".", "updateRestock")
					elseif key == "recruit" then
						gui.set_enabled(dialog.recruit.frame, true)
						UIFocus = "recruit"
						msg.post(".", "updateRecruit")
					end
				end
			end
		elseif UIFocus == "restock" then
			for key, val in pairs(dialog.buy) do
				if gui.pick_node(val, action.x, action.y) then
					if key == "cancel" then
						gui.set_enabled(dialog.buy.frame, false)
						UIFocus = "main"
					elseif key == "fuelPlus" then
						if fuelBought + cargo.fuel < MAXFUEL then
							fuelBought = fuelBought + 1
							msg.post(".", "updateRestock")
						end
					elseif key == "fuelMinus" then
						if fuelBought > 0 then
							fuelBought = fuelBought - 1
							msg.post(".", "updateRestock")
						end
					elseif key == "rationsPlus" then
						if rationsBought + cargo.rations < MAXRATIONS then
							rationsBought = rationsBought + 1
							msg.post(".", "updateRestock")
						end
					elseif key == "rationsMinus" then
						if rationsBought > 0 then
							rationsBought = rationsBought - 1
							msg.post(".", "updateRestock")
						end
					elseif key == "confirm" then
						if totalPrice <= cargo.money then
							cargo.money = cargo.money - totalPrice
							cargo.fuel = cargo.fuel + fuelBought
							cargo.rations = cargo.rations + rationsBought
							gui.set_enabled(dialog.buy.frame, false)
							msg.post(".", "updateCargo")
							UIFocus = "main"
						end
					end
				end
			end
		elseif UIFocus == "recruit" then
			if gui.pick_node(dialog.recruit.cancel, action.x, action.y) then
				gui.set_enabled(dialog.recruit.frame, false)
				UIFocus = "main"
				selectedRecruit = nil
			elseif gui.pick_node(dialog.recruit.hire, action.x, action.y) and selectedRecruit then
				table.insert(crew, planet.recruits[selectedRecruit])
				table.remove(planet.recruits, selectedRecruit)
				selectedRecruit = nil
				msg.post(".", "update")
				msg.post(".", "updateCrew")
			else
				for key, val in ipairs(dialog.recruit) do
					if gui.pick_node(val.name, action.x, action.y) or gui.pick_node(val.face, action.x, action.y) then
						if selectedRecruit then gui.set_color(dialog.recruit[selectedRecruit].name, COLOR_DESELECTED) end
						selectedRecruit = key
						gui.set_color(val.name, COLOR_SELECTION)
						gui.set_color(dialog.recruit.hire, COLOR_ENABLED)
					end
				end
			end
		end
	end
end
