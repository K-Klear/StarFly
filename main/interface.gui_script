math.randomseed(os.time())
math.random(); math.random(); math.random()

local text = require("main.text")
local FPlanet = require("main.planet")
local DH = require("main.dialogs")
local CON = require("main.constants")
local EVENTS = require("main.events")
local FCrew = require("main.functionsCrew")
local FACE = require("main.face")
local UPG = require("main.upgrades")
local DICE = require("main.dice")
local TALK = require("main.talk")
local SHIP = require("main.ship.ship_layout")
local TOOL = require("main.selection.tooltips")
local RET = require("main.selection.reticle")

local focus = {action = true, reticle = true, tooltip = true}

local planet = FPlanet.generatePlanet("Frontier", true)
local mission = {}
local phase = hash("planet")

crew = {}
crew[0] = {skills = {medic = 0, mech = 0, gunner = 0, comms = 0, pilot = 0, fight = 0}}

cargo = {fuel = 5, rations = 20, money = 1000}
earnings = 100

local dialog = {}

local fuelBought = CON.MAXFUEL - cargo.fuel
local rationsBought = CON.MAXRATIONS - cargo.rations
local totalPrice

local statsOrder = {pilot = 1, mech = 2, comms = 3, gunner = 4, medic = 5, fight = 6}

local selection
local currentMission
local cursor_position = vmath.vector3(0, 0, 1)

local speechResult = {
	reply1 = {},
	reply2 = {},
	reply3 = {}
}

local function getSelectorText(target)
	target = target or RET.target
	local type = type(target)
	if type == "string" then
		return SHIP[target].name, SHIP[target].job
	elseif type == "number" then
		local icon = crew[target].role
		if icon == "passenger" then
			icon = "none"
		elseif not icon then
			icon = "empty"
		end
		return text.getName(crew[target]), icon
	end
end

local function updateDialog(dialogID, location)
	if dialogID == "buy" then
		gui.set_text(dialog.buy.lbl.fuelAmount, fuelBought)
		gui.set_text(dialog.buy.lbl.rationsAmount, rationsBought)
		totalPrice = planet.price.fuel * fuelBought + planet.price.rations * rationsBought
		gui.set_text(dialog.buy.lbl.totalPrice, totalPrice)
		if totalPrice > cargo.money then
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_DISABLED)
		else
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_ENABLED)
		end
	elseif dialogID == "recruit" then
		for key, val in ipairs(dialog.recruit.ico) do
			for k, v in pairs(val) do
				gui.delete_node(v)
			end
		end
		dialog.recruit.ico = {}
		if #planet.recruits == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.recruit.btn[x].name, false)
				gui.set_enabled(dialog.recruit.btn[x].hire, false)
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, true)
		else
			for x = 1, 5 do
				if #planet.recruits >= x then
					gui.set_text(dialog.recruit.btn[x].name, text.getName(planet.recruits[x]))
					gui.set_enabled(dialog.recruit.btn[x].name, true)
					table.insert(dialog.recruit.ico, FACE.drawFace(planet.recruits[x].face, vmath.vector3(-180, 90 - 20 * x, 0), 1))
					gui.set_enabled(dialog.recruit.btn[x].hire, true)
				else
					gui.set_enabled(dialog.recruit.btn[x].name, false)
					gui.set_enabled(dialog.recruit.btn[x].hire, false)
				end
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, false)
			for key, val in ipairs(dialog.recruit.ico) do
				for k, v in pairs(val) do
					gui.set_parent(v, dialog.recruit.frame)
				end
				gui.move_above(val.hair, val.forehead)
				gui.move_below(val.body, val.chin)
			end
		end
	elseif dialogID == "info" then
		gui.set_text(dialog.info.lbl.fuel, "FUEL: "..cargo.fuel)
		gui.set_text(dialog.info.lbl.rations, "RATIONS: "..cargo.rations)
		gui.set_text(dialog.info.lbl.money, "CREDITS: "..cargo.money)
		gui.set_text(dialog.info.lbl.region, planet.region)
		gui.set_text(dialog.info.lbl.settlement, location or planet.settlement)
		gui.set_text(dialog.info.lbl.government, planet.government)
	elseif dialogID == "crew" then
		for key, val in ipairs(dialog.crew.ico) do
			for k, v in pairs(val) do
				gui.delete_node(v)
			end
		end
		dialog.crew.ico = {}
		earnings = 100
		for crewID, crewData in ipairs(crew) do
			gui.set_text(dialog.crew.lbl[crewID].name, text.getName(crewData))
			gui.set_enabled(dialog.crew.lbl[crewID].name, true)
			gui.set_text(dialog.crew.btn[crewID].role, crewData.role or "none")
			gui.set_enabled(dialog.crew.btn[crewID].role, true)
			gui.set_enabled(dialog.crew.btn[crewID].skills, true)
			gui.set_enabled(dialog.crew.btn[crewID].background, true)
			if crewData.role == "passenger" then
				gui.set_enabled(dialog.crew.lbl[crewID].wage, false)
				gui.set_enabled(dialog.crew.lbl[crewID].wage_up, false)
				gui.set_enabled(dialog.crew.lbl[crewID].wage_down, false)
				gui.set_enabled(dialog.crew.btn[crewID].dismiss, false)
			else
				local text = crewData.wage or "0"
				earnings = earnings - (crewData.wage or 0)
				text = text.."%"
				gui.set_text(dialog.crew.lbl[crewID].wage, text)
				gui.set_enabled(dialog.crew.lbl[crewID].wage, true)
				gui.set_enabled(dialog.crew.btn[crewID].wage_up, true)
				gui.set_enabled(dialog.crew.btn[crewID].wage_down, true)
				gui.set_enabled(dialog.crew.btn[crewID].dismiss, true)
			end
			table.insert(dialog.crew.ico, FACE.drawFace(crewData.face, vmath.vector3(-216, 104 - 20 * crewID, 1), 1))
			local face = dialog.crew.ico[crewID]
			for k, v in pairs(face) do
				gui.set_parent(v, dialog.crew.frame)
			end
			gui.move_above(face.hair, face.forehead)
			gui.move_below(face.body, face.chin)
		end
		gui.set_text(dialog.crew.lbl.remainder, "EARNINGS: "..earnings.."%")
		for x = #crew + 1, CON.MAXCREW do
			gui.set_enabled(dialog.crew.lbl[x].name, false)
			gui.set_enabled(dialog.crew.btn[x].role, false)
			gui.set_enabled(dialog.crew.lbl[x].wage, false)
			gui.set_enabled(dialog.crew.btn[x].wage_up, false)
			gui.set_enabled(dialog.crew.btn[x].wage_down, false)
			gui.set_enabled(dialog.crew.btn[x].background, false)
			gui.set_enabled(dialog.crew.btn[x].skills, false)
			gui.set_enabled(dialog.crew.btn[x].dismiss, false)
		end
	elseif dialogID == "travel" then
		gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.exploreCore, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreFrontier, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreRim, CON.COLOR_DEFAULT)
		for key, val in ipairs(mission) do
			if val.target == "Core" then
				gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DEFAULT)
			elseif val.target == "Frontier" then
				gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DEFAULT)
			elseif val.target == "Rim" then
				gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DEFAULT)
			end
		end
		if selection then
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DEFAULT)
			gui.set_color(selection, CON.COLOR_SELECTION)
		else
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "work" then
		if #planet.missions == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.work.btn[x].type, false)
				gui.set_enabled(dialog.work.btn[x].target, false)
				gui.set_enabled(dialog.work.btn[x].wage, false)
			end
			gui.set_enabled(dialog.work.lbl.none, true)
		else
			for x = 1, 5 do
				if #planet.missions >= x then
					gui.set_text(dialog.work.btn[x].type, planet.missions[x].type)
					gui.set_text(dialog.work.btn[x].target, planet.missions[x].target)
					gui.set_text(dialog.work.btn[x].wage, planet.missions[x].wage)
					gui.set_enabled(dialog.work.btn[x].type, true)
					gui.set_enabled(dialog.work.btn[x].target, true)
					gui.set_enabled(dialog.work.btn[x].wage, true)
				else
					gui.set_enabled(dialog.work.btn[x].type, false)
					gui.set_enabled(dialog.work.btn[x].target, false)
					gui.set_enabled(dialog.work.btn[x].wage, false)
				end
			end
			gui.set_enabled(dialog.work.lbl.none, false)
		end
		if selection then
			gui.set_color(dialog.work.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.work.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "missions" then
		for x = 1, 5 do
			gui.set_color(dialog.missions.btn[x].type, CON.COLOR_DEFAULT)
			gui.set_color(dialog.missions.btn[x].target, CON.COLOR_DEFAULT)
			gui.set_color(dialog.missions.btn[x].wage, CON.COLOR_DEFAULT)
			if x > #currentMission then
				gui.set_enabled(dialog.missions.btn[x].type, false)
				gui.set_enabled(dialog.missions.btn[x].target, false)
				gui.set_enabled(dialog.missions.btn[x].wage, false)
			else
				gui.set_text(dialog.missions.btn[x].type, mission[currentMission[x]].type)
				gui.set_text(dialog.missions.btn[x].target, mission[currentMission[x]].target)
				gui.set_text(dialog.missions.btn[x].wage, mission[currentMission[x]].wage)
				gui.set_enabled(dialog.missions.btn[x].type, true)
				gui.set_enabled(dialog.missions.btn[x].target, true)
				gui.set_enabled(dialog.missions.btn[x].wage, true)
			end
		end
		if selection then
			gui.set_color(dialog.missions.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.missions.btn.confirm, CON.COLOR_DISABLED)
		end
		gui.set_enabled(dialog.missions.lbl.none, false)
	end
end

local function hide_UI()
	gui.set_enabled(dialog.action.frame, false)
	gui.set_enabled(dialog.action_travel.frame, false)
	gui.set_enabled(dialog.action_orbit.frame, false)
	gui.set_enabled(dialog.info.frame, false)
	focus = {}
end

local function show_UI(type)
	if type == hash("planet") then
		gui.set_enabled(dialog.action.frame, true)
		gui.set_enabled(dialog.info.frame, true)
		focus = {action = true, reticle = true, tooltip = true}
	elseif type == hash("travel") then
		gui.set_enabled(dialog.info.frame, true)
		gui.set_enabled(dialog.action_travel.frame, true)
		focus = {action_travel = true, reticle = true, tooltip = true}
	elseif type == hash("orbit") then
		gui.set_enabled(dialog.info.frame, true)
		gui.set_enabled(dialog.action_orbit.frame, true)
		focus = {action_orbit = true, reticle = true, tooltip = true}
	end
end

local function travel(target, mission)
	cargo.fuel = cargo.fuel - 1
	cargo.rations = cargo.rations - #crew
	planet = FPlanet.generatePlanet(target)
	msg.post("/background", "space")
	hide_UI()
	updateDialog("info", "-")
	phase = hash("travel")
end

local function travel_orbit()
	msg.post("/background", "warp")
	hide_UI()
	updateDialog("info")
	phase = hash("orbit")
end

local function land()
	msg.post("/background", "land")
	hide_UI()
	phase = hash("planet")
end

local function checkMission(target)
	local missionList = {}
	for key, val in ipairs(mission) do
		if val.target == target then
			table.insert(missionList, key)
		end
	end
	if #missionList > 0 then return missionList end
end


function init(self)
	msg.post(".", "acquire_input_focus")
	
	dialog.travel = DH.newDialog("travel")
	dialog.recruit = DH.newDialog("recruit")
	dialog.buy = DH.newDialog("buy")
	dialog.action = DH.newDialog("action", true)
	dialog.info = DH.newDialog("info", true)
	dialog.warning = DH.newDialog("warning")
	dialog.crew = DH.newDialog("crew")
	dialog.work = DH.newDialog("work")
	dialog.missions = DH.newDialog("work")
	dialog.speech = DH.newDialog("speech")
	dialog.event = DH.newDialog("event")
	dialog.action_travel = DH.newDialog("action_travel")
	dialog.action_orbit = DH.newDialog("action_orbit")
	
	gui.set_text(dialog.missions.lbl.none, "There are no ongoing jobs.")
	gui.set_text(dialog.missions.lbl.title, "CHOOSE A MISSION")
	
	updateDialog("info")

	for x = 1, 3 do
		FCrew.recruit()
	end

	TOOL.setup()
	RET.setup()
	msg.post("/background", "setup")
end


function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if focus.action then
			for key, val in pairs(dialog.action.btn) do
				if gui.pick_node(val, action.x, action.y) then
					selection = nil
					if key == "buy" then
						fuelBought = CON.MAXFUEL - cargo.fuel
						rationsBought = CON.MAXRATIONS - cargo.rations
						gui.set_text(dialog.buy.lbl.fuelPrice, "@ "..planet.price.fuel.." cr/unit.")
						gui.set_text(dialog.buy.lbl.rationsPrice, "@ "..planet.price.rations.." cr/unit.")
						gui.set_enabled(dialog.buy.frame, true)
						focus = {buy = true}
						updateDialog("buy")
					elseif key == "recruit" then
						gui.set_enabled(dialog.recruit.frame, true)
						focus = {recruit = true}
						updateDialog("recruit")
					elseif key == "travel" then
						gui.set_enabled(dialog.travel.frame, true)
						focus = {travel = true}
						updateDialog("travel")
					elseif key == "work" then
						gui.set_enabled(dialog.work.frame, true)
						focus = {work = true}
						updateDialog("work")
					elseif key == "crew" then
						gui.set_enabled(dialog.crew.frame, true)
						focus = {crew = true}
						updateDialog("crew")
					end
				end
			end
		end
		if focus.reticle then
			for key, val in ipairs(RET.buttons) do
				if gui.pick_node(val, action.x, action.y) then
					local label = gui.get_text(val)
					if label == "TALK" then
						TALK.openDialog(dialog.speech, crew[RET.target_permanent], TALK.skills(crew[RET.target_permanent]), nil , "OK")
						speechResult.reply2 = {"close", "action"}
						RET.hide()
						RET.hide_permanent()
						focus = {speech = true}
					elseif label == "ASSIGN" or label == "MOVE" then
						RET.hide_buttons()
						RET.action = label
					end
				end
			end
			if RET.target then
				if type(RET.target) == "number" then
					RET.show_permanent(crew[RET.target].pos, nil, RET.target, {{text = "TALK"}, {text = "ASSIGN"}, {text = "MOVE"}})
				else
					if RET.action == "MOVE" then
						msg.post(crew[RET.target_permanent].go, "move", {target = RET.target})
						RET.hide_permanent()
					elseif RET.action == "ASSIGN" then
						local position = SHIP[RET.target].job
						if position then
							for key, val in ipairs(crew) do
								if val.role == position then val.role = nil end
							end
							crew[RET.target_permanent].role = position
							msg.post(crew[RET.target_permanent].go, "move", {target = RET.target})
						end
					end
				end
			end
		end
		if focus.buy then
			for key, val in pairs(dialog.buy.btn) do
				if gui.pick_node(val, action.x, action.y) then
					if key == "cancel" then
						gui.set_enabled(dialog.buy.frame, false)
						focus = {action = true, reticle = true, tooltip = true}
					elseif key == "fuelPlus" then
						if fuelBought + cargo.fuel < CON.MAXFUEL then
							fuelBought = fuelBought + 1
							updateDialog("buy")
						end
					elseif key == "fuelMinus" then
						if fuelBought > 0 then
							fuelBought = fuelBought - 1
							updateDialog("buy")
						end
					elseif key == "rationsPlus" then
						if rationsBought + cargo.rations < CON.MAXRATIONS then
							rationsBought = rationsBought + 1
							updateDialog("buy")
						end
					elseif key == "rationsMinus" then
						if rationsBought > 0 then
							rationsBought = rationsBought - 1
							updateDialog("buy")
						end
					elseif key == "confirm" then
						if totalPrice <= cargo.money then
							cargo.money = cargo.money - totalPrice
							cargo.fuel = cargo.fuel + fuelBought
							cargo.rations = cargo.rations + rationsBought
							updateDialog("info")
							gui.set_enabled(dialog.buy.frame, false)
							focus = {action = true, reticle = true, tooltip = true}
						end
					end
				end
			end
		end
		if focus.recruit then
			for key, val in pairs(dialog.recruit.btn) do
				if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
					if key == "cancel" then
						gui.set_enabled(dialog.recruit.frame, false)
						focus = {action = true, reticle = true, tooltip = true}
					end
				elseif type(val) == "table" then
					for button, v in pairs(val) do
						if gui.pick_node(v, action.x, action.y) then
							if button == "hire" then
								FCrew.recruit(planet.recruits[key])
								table.remove(planet.recruits, key)
								updateDialog("recruit")
							elseif button == "name" then
								gui.set_enabled(dialog.recruit.frame, false)
								TALK.openDialog(dialog.speech, planet.recruits[key], TALK.recruit_intro(planet.recruits[key]), "Background", "Wage", "Hire")
								speechResult.reply1 = {"close", "recruit"}
								speechResult.reply2 = {"close", "recruit"}
								speechResult.reply3 = {"close", "recruit"}
								focus = {speech = true}
							end
						end
					end
				end
			end
		end
		if focus.crew then
			for crewID, val in pairs(dialog.crew.btn) do
				if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
					if crewID == "close" then
						gui.set_enabled(dialog.crew.frame, false)
						focus = {action = true, reticle = true, tooltip = true}
					end
				elseif type(val) == "table" then
					for button, v in pairs(val) do 
						if gui.pick_node(v, action.x, action.y) then
							if button == "wage_up" and crew[crewID].wage < 100 and earnings > 0 then
								crew[crewID].wage = crew[crewID].wage + 5
								earnings = earnings - 5
								gui.set_text(dialog.crew.lbl[crewID].wage, crew[crewID].wage.."%")
								gui.set_text(dialog.crew.lbl.remainder, "EARNINGS: "..earnings.."%")
							elseif button == "wage_down" and crew[crewID].wage > 0 then
								crew[crewID].wage = crew[crewID].wage - 5
								earnings = earnings + 5
								gui.set_text(dialog.crew.lbl[crewID].wage, crew[crewID].wage.."%")
								gui.set_text(dialog.crew.lbl.remainder, "EARNINGS: "..earnings.."%")
							elseif button == "dismiss" then
								FCrew.dismiss(crewID)
								updateDialog("crew")
							end
						end
					end
				end
					
							--[[
							if key == "skills" and gui.is_enabled(val) then
								
							if key == "recruit"..x and gui.is_enabled(val) then
								if selection then gui.set_color(dialog.recruit.btn["recruit"..selection], CON.COLOR_DEFAULT) end
								selection = x
								gui.set_color(val, CON.COLOR_SELECTION)
								gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_ENABLED)
							elseif key == "skills"..x and gui.is_enabled(val) then
								gui.set_enabled(dialog.recruit.frame, false)
								TALK.openDialog(dialog.speech, planet.recruits[x], TALK.skills(planet.recruits[x]), nil , "OK")
								speechResult.reply2 = {"close", "recruit"}
								focus = {speech = true}
							elseif key == "about"..x and gui.is_enabled(val) then
								gui.set_enabled(dialog.recruit.frame, false)
								TALK.openDialog(dialog.speech, planet.recruits[x], TALK.intro(planet.recruits[x]), nil , "OK")
								speechResult.reply2 = {"close", "recruit"}
								focus = {speech = true}
							end
							--]]
			end
		end
		if focus.travel then
			for key, val in pairs(dialog.travel.btn) do
				if gui.pick_node(val, action.x, action.y) then
					if key == "confirm" and selection then
						gui.set_enabled(dialog.travel.frame, false)
						if cargo.fuel < 1 then
							gui.set_text(dialog.warning.lbl.text, "You don't have enough fuel!")
							gui.set_enabled(dialog.warning.frame, true)
							focus = {warning = true}
						elseif cargo.rations < #crew then
							gui.set_text(dialog.warning.lbl.text, "You don't have enough rations!")
							gui.set_enabled(dialog.warning.frame, true)
							focus = {warning = true}
						elseif FCrew.getRole("pilot") == 0 then
							gui.set_text(dialog.warning.lbl.text, "You must assign a pilot!")
							gui.set_enabled(dialog.warning.frame, true)
							focus = {warning = true}
						else
							local chosenTarget
							if selection == dialog.travel.btn.exploreCore then
								travel("Core")
							elseif selection == dialog.travel.btn.exploreFrontier then
								travel("Frontier")
							elseif selection == dialog.travel.btn.exploreRim then
								travel("Rim")
							elseif selection == dialog.travel.btn.missionCore then
								chosenTarget = "Core"
							elseif selection == dialog.travel.btn.missionFrontier then
								chosenTarget = "Frontier"
							elseif selection == dialog.travel.btn.missionRim then
								chosenTarget = "Rim"
							end
							if chosenTarget then
								currentMission = checkMission(chosenTarget)
								if #currentMission == 1 then
									currentMission = currentMission[1]
									travel(chosenTarget)
								elseif #currentMission > 1 then
									updateDialog("missions")
									selection = nil
									gui.set_enabled(dialog.missions.frame, true)
									focus = {missions = true}
								end
							end
						end
						selection = nil
					elseif key == "cancel" then
						selection = nil
						gui.set_enabled(dialog.travel.frame, false)
						focus = {action = true, reticle = true, tooltip = true}
					elseif key == "exploreCore" or key == "exploreFrontier" or key == "exploreRim" then
						selection = val
						updateDialog("travel")
					elseif (key == "missionCore" or key == "missionFrontier" or key == "missionRim") and gui.get_color(val) == CON.COLOR_DEFAULT then
						selection = val
						updateDialog("travel")
					end
				end
			end
		end
		if focus.work then
			for key, val in pairs(dialog.work.btn) do
				if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
					if key == "cancel" then
						if selection then
							gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
						end
						selection = nil
						gui.set_enabled(dialog.work.frame, false)
						focus = {action = true, reticle = true, tooltip = true}
					elseif key == "confirm" and selection then
						if #mission > 4 then
							gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
							selection = nil
							gui.set_enabled(dialog.work.frame, false)
							gui.set_text(dialog.warning.lbl.text, "You have too many missions already!")
							gui.set_enabled(dialog.warning.frame, true)
							focus = {warning = true}
						else
							table.insert(mission, planet.missions[selection])
							table.remove(planet.missions, selection)
							gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
							selection = nil
							gui.set_enabled(dialog.work.frame, false)
							focus = {action = true, reticle = true, tooltip = true}
						end
					end
				elseif type(val) == "table" then
					if (gui.pick_node(val.type, action.x, action.y) or gui.pick_node(val.target, action.x, action.y) or gui.pick_node(val.wage, action.x, action.y)) and gui.is_enabled(val.type) then
						if selection then
							gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
						end
						selection = key
						gui.set_color(val.type, CON.COLOR_SELECTION)
						gui.set_color(val.target, CON.COLOR_SELECTION)
						gui.set_color(val.wage, CON.COLOR_SELECTION)
						gui.set_color(dialog.work.btn.confirm, CON.COLOR_ENABLED)
					end
				end
			end
		end
		if focus.missions then
			for key, val in pairs(dialog.missions.btn) do
				if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
					if key == "cancel" then
						if selection then
							gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
						end
						selection = nil
						updateDialog("travel")
						gui.set_enabled(dialog.missions.frame, false)
						gui.set_enabled(dialog.travel.frame, true)
						focus = {travel = true}
					elseif key == "confirm" and selection then
						currentMission = currentMission[selection]
						selection = nil
						gui.set_enabled(dialog.missions.frame, false)
						travel(mission[currentMission].target)
					end
				elseif type(val) == "table" then
					if (gui.pick_node(val.type, action.x, action.y) or gui.pick_node(val.target, action.x, action.y) or gui.pick_node(val.wage, action.x, action.y)) and gui.is_enabled(val.type) then
						if selection then
							gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
						end
						selection = key
						gui.set_color(val.type, CON.COLOR_SELECTION)
						gui.set_color(val.target, CON.COLOR_SELECTION)
						gui.set_color(val.wage, CON.COLOR_SELECTION)
						gui.set_color(dialog.missions.btn.confirm, CON.COLOR_ENABLED)
					end
				end
			end
		end
		if focus.speech then
			for key, val in pairs(dialog.speech.btn) do
				if gui.pick_node(val, action.x, action.y) then
					if speechResult[key] then
						for k, v in ipairs(speechResult[key]) do
							if v == "close" then
								gui.set_enabled(dialog.speech.frame, false)
							elseif v == "recruit" then
								updateDialog("recruit")
								gui.set_enabled(dialog.recruit.frame, true)
								focus = {recruit = true}
							elseif v == "action" then
								show_UI(phase)
							end
						end
						speechResult = {}
					end
				end
			end
		end
		if focus.warning then
			for key, val in pairs(dialog.warning.btn) do
				if gui.pick_node(val, action.x, action.y) then
					gui.set_enabled(dialog.warning.frame, false)
					focus = {action = true, reticle = true, tooltip = true}
				end
			end
		end
		if focus.action_travel then
			for key, val in pairs(dialog.action_travel.btn) do
				if gui.pick_node(val, action.x, action.y) then
					if key == "proceed" then
						travel_orbit()
					end
				end
			end
		end
		if focus.action_orbit then
			for key, val in pairs(dialog.action_orbit.btn) do
				if gui.pick_node(val, action.x, action.y) then
					if key == "land" then
						land()
					end
				end
			end
		end
		if focus.event then
			local current_stage = EVENTS.event[EVENTS.stage]
			if current_stage.stage_type == "end" then
				for key, val in pairs(dialog.event.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if current_stage.effect == "recruit_random" and #crew < CON.MAXCREW then
							FCrew.recruit()
						end
						EVENTS.event = nil
						EVENTS.stage = nil
						gui.set_enabled(dialog.event.frame, false)
						show_UI(phase)
					end
				end
			elseif current_stage.stage_type == "choice" then
				for key, val in pairs(dialog.event.btn) do
					if gui.pick_node(val, action.x, action.y) then
						EVENTS.stage = current_stage.links[tonumber(string.sub(key, -1))].pid + 0
						EVENTS.progress(dialog)
					end
				end
			end
		end
		if not focus.reticle then
			RET.hide()
			RET.hide_permanent()
		end
		if not focus.tooltip then
			TOOL.hide()
		end
	elseif action_id == hash("enter") and action.pressed then
	
	else
		if focus.tooltip or focus.reticle then
			cursor_position.x = action.x; cursor_position.y = action.y
			local _selector
			for key, val in pairs(SHIP) do
				if val.pos then
					if action.x > val.pos.x and action.x < val.pos.x + val.size.x and action.y > val.pos.y and action.y < val.pos.y + val.size.y then
						_selector = val
						_thing = key
					end
				end
			end
			for key, val in pairs(crew) do
				if val.pos then
					if action.x > val.pos.x and action.x < val.pos.x + 40 and action.y > val.pos.y and action.y < val.pos.y + 78 then
						_selector = val
						_selector.size = vmath.vector3(40, 78, 0)
						_thing = key
					end
				end
			end
			for key, val in ipairs(RET.buttons) do
				if gui.is_enabled(val) and gui.pick_node(val, action.x, action.y) then
					_selector = nil
					_thing = nil
				end
			end
			if _selector then
				if focus.reticle then RET.show(_selector.pos, _selector.size, _thing) end
				if focus.tooltip then
					local text, ico = getSelectorText()
					TOOL.show(text, cursor_position, ico)
				end
			else
				RET.hide()
				TOOL.hide()
			end
		end
		for menu in pairs(focus) do
			if dialog[menu] then
				for key, val in pairs(dialog[menu].btn) do
					if type(val) == "table" then
						for k_, v_ in pairs(val) do
							if gui.pick_node(v_, action.x, action.y) then
								gui.set_shadow(v_, CON.COLOR_SELECTION)
								gui.set_outline(v_, CON.COLOR_SELECTION)
							else
								gui.set_shadow(v_, vmath.vector4(0, 0, 0, 0))
								gui.set_outline(v_, vmath.vector4(0, 0, 0, 0))
							end
						end
					else
						if gui.pick_node(val, action.x, action.y) then
							gui.set_shadow(val, CON.COLOR_SELECTION)
							gui.set_outline(val, CON.COLOR_SELECTION)
						else
							gui.set_shadow(val, vmath.vector4(0, 0, 0, 0))
							gui.set_outline(val, vmath.vector4(0, 0, 0, 0))
						end
					end
				end
			end
			for key, val in ipairs(RET.buttons) do
				if gui.is_enabled(val) and gui.pick_node(val, action.x, action.y) then
					gui.set_shadow(val, CON.COLOR_SELECTION)
					gui.set_outline(val, CON.COLOR_SELECTION)
				else
					gui.set_shadow(val, vmath.vector4(0, 0, 0, 0))
					gui.set_outline(val, vmath.vector4(0, 0, 0, 0))
				end
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_position") then
		crew[message.crew].pos = message.pos
		crew[message.crew].pos.x = crew[message.crew].pos.x - 20
		local no_button = true
		for key, val in ipairs(RET.buttons) do
			if gui.is_enabled(val) and gui.pick_node(val, cursor_position.x, cursor_position.y) then
				no_button = false
			end
		end
		if focus.reticle and no_button then
			if cursor_position.x > message.pos.x and cursor_position.x < message.pos.x + 40 and cursor_position.y > message.pos.y and cursor_position.y < message.pos.y + 78 then
				RET.show(message.pos, vmath.vector3(40, 78, 0), message.crew)
				local text, ico = getSelectorText()
				TOOL.show(text, cursor_position, ico)
			elseif RET.target == message.crew then
				RET.hide()
				TOOL.hide()
			end
			if RET.target_permanent == message.crew then
				RET.move_permanent(message.pos, message.crew)
			end
		end
	elseif message_id == hash("transition_done") then
		if phase == hash("travel") then
			EVENTS.new_event(dialog)
			focus = {event = true}
		elseif phase == hash("orbit") then
			gui.set_enabled(dialog.action_orbit.frame, true)
			show_UI(phase)
		elseif phase == hash("planet") then
			show_UI(phase)
			if currentMission then
				local loot = mission[currentMission].wage
				for key, val in ipairs(crew) do
					local share = math.floor(loot * (val.wage / 100))
					val.money = val.money + share
					loot = loot - share
				end
				cargo.money = cargo.money + loot
				gui.set_text(dialog.warning.lbl.text, "Job completed. You earned "..loot)
				gui.set_enabled(dialog.warning.frame, true)
				focus = {warning = true}
				table.remove(mission, currentMission)
				updateDialog("info")
				currentMission = nil
			end
		end
	end
end
