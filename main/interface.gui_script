local text = require("main.text")
local FPlanet = require("main.planet")
local DH = require("main.dialogHelper")
local CON = require("main.constants")

local focus = {action = true}

local planet = FPlanet.generatePlanet("Frontier", true)
local mission = {}


local btn = {
	crew = {},
	role = {},
	actions = {}
}

local lbl = {
	crewStats = {
		skills = {},
		skillTitle = {}
	}
}

local dialog = {}

local fuelBought = CON.MAXFUEL - cargo.fuel
local rationsBought = CON.MAXRATIONS - cargo.rations
local totalPrice

local statsOrder = {pilot = 1, mech = 2, comms = 3, gunnery = 4, medic = 5, fight = 6}

local selectedCrew
local selectedRecruit
local selectedTravel

local face = {}

function face.f()
	face.background = gui.new_box_node(vmath.vector3(500, 500, 0), vmath.vector3(64, 64, 0))
	gui.set_color(face.background, vmath.vector4(0.5, 0.5, 0.5, 1))

	local skinTone = CON.SKINTONE[math.random(1, #CON.SKINTONE)]
	
	face.base = gui.new_box_node(vmath.vector3(500, 500, 0), vmath.vector3(17, 25, 0))
	gui.set_texture(face.base, hash("faces"))
	gui.play_flipbook(face.base, hash("base1"))
	gui.set_scale(face.base, vmath.vector3(2, 2, 0))
	
	gui.set_color(face.base, skinTone)

	face.chin = gui.new_box_node(vmath.vector3(500, 500, 0), vmath.vector3(17, 25, 0))
	gui.set_texture(face.chin, hash("faces"))
	local rand = math.random(1, 3)
	if rand == 1 then
		gui.play_flipbook(face.chin, hash("chin1"))
	elseif rand == 2 then
		gui.play_flipbook(face.chin, hash("chin2"))
	else
		gui.play_flipbook(face.chin, hash("chin3"))
	end
	gui.set_scale(face.chin, vmath.vector3(2, 2, 0))
	gui.set_color(face.chin, skinTone)

	face.mouth = gui.new_box_node(vmath.vector3(500, 500, 0), vmath.vector3(17, 25, 0))
	gui.set_texture(face.mouth, hash("faces"))
	local rand = math.random(1, 4)
	if rand == 1 then
		gui.play_flipbook(face.mouth, hash("mouth1"))
	elseif rand == 2 then
		gui.play_flipbook(face.mouth, hash("mouth2"))
	elseif rand == 3 then
		gui.play_flipbook(face.mouth, hash("mouth3"))
	elseif rand == 4 then
		gui.play_flipbook(face.mouth, hash("mouth4"))
	end
	gui.set_scale(face.mouth, vmath.vector3(2, 2, 0))
	--gui.set_color(face.mouth, skinTone)


	face.hair = gui.new_box_node(vmath.vector3(500, 500, 0), vmath.vector3(17, 25, 0))
	gui.set_texture(face.hair, hash("faces"))
	gui.play_flipbook(face.hair, hash("hair1"))
	gui.set_scale(face.hair, vmath.vector3(4, 4, 0))

	gui.set_color(face.hair, CON.HAIRCOLOR[math.random(1, #CON.HAIRCOLOR)])
	gui.set_enabled(face.hair, false)
end

function face.refresh()
	local rand = math.random(1, 4)
	if rand == 1 then
		gui.play_flipbook(face.mouth, hash("mouth1"))
	elseif rand == 2 then
		gui.play_flipbook(face.mouth, hash("mouth2"))
	elseif rand == 3 then
		gui.play_flipbook(face.mouth, hash("mouth3"))
	elseif rand == 4 then
		gui.play_flipbook(face.mouth, hash("mouth4"))
	end
	local rand = math.random(1, 3)
	if rand == 1 then
		gui.play_flipbook(face.chin, hash("chin1"))
	elseif rand == 2 then
		gui.play_flipbook(face.chin, hash("chin2"))
	else
		gui.play_flipbook(face.chin, hash("chin3"))
	end
end


local function updateDialog(dialogID)
	if dialogID == "buy" then
		gui.set_text(dialog.buy.lbl.fuelAmount, fuelBought)
		gui.set_text(dialog.buy.lbl.rationsAmount, rationsBought)
		totalPrice = planet.price.fuel * fuelBought + planet.price.rations * rationsBought
		gui.set_text(dialog.buy.lbl.totalPrice, totalPrice)
		if totalPrice > cargo.money then
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_DISABLED)
		else
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_ENABLED)
		end
	elseif dialogID == "recruit" then
		if #planet.recruits == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.recruit.btn[x].face, false)
				gui.set_enabled(dialog.recruit.btn[x].name, false)
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, true)
		else
			for x = 1, 5 do
				if #planet.recruits >= x then
					gui.set_text(dialog.recruit.btn[x].name, text.nameList[planet.recruits[x].name.gender][planet.recruits[x].name.key])
					gui.set_enabled(dialog.recruit.btn[x].face, true)
					gui.set_enabled(dialog.recruit.btn[x].name, true)
				else
					gui.set_enabled(dialog.recruit.btn[x].face, false)
					gui.set_enabled(dialog.recruit.btn[x].name, false)
				end
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, false)
		end
		if selectedRecruit then
			gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "info" then
		gui.set_text(dialog.info.lbl.fuel, "FUEL: "..cargo.fuel)
		gui.set_text(dialog.info.lbl.rations, "RATIONS: "..cargo.rations)
		gui.set_text(dialog.info.lbl.money, "CREDITS: "..cargo.money)
		gui.set_text(dialog.info.lbl.region, planet.region)
		gui.set_text(dialog.info.lbl.settlement, planet.settlement)
		gui.set_text(dialog.info.lbl.government, planet.government)
	elseif dialogID == "crew" then
		for key, val in pairs(btn.crew) do
			gui.delete_node(val)
		end
		local y = 1
		for key, val in ipairs(crew) do
			if val.active then
				btn.crew[key] = gui.new_text_node(vmath.vector3(50, 700 - 20 * y, 0), y..") "..text.nameList[val.name.gender][val.name.key].." "..val.role)
				gui.set_pivot(btn.crew[key], gui.PIVOT_W)
			end
			y = y + 1
		end
		if selectedCrew then gui.set_color(btn.crew[selectedCrew], CON.COLOR_SELECTION) end
	elseif dialogID == "travel" then
		gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.exploreCore, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreFrontier, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreRim, CON.COLOR_DEFAULT)
		for key, val in ipairs(mission) do
			if val.region == "core" then
				gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DEFAULT)
			elseif val.region == "frontier" then
				gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DEFAULT)
			elseif val.region == "rim" then
				gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DEFAULT)
			end
		end
		if selectedTravel then
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DEFAULT)
			gui.set_color(selectedTravel, CON.COLOR_SELECTION)
		else
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DISABLED)
		end
	end
end

function init(self)
	
	dialog.travel = DH.newDialog("travel")
	dialog.recruit = DH.newDialog("recruit")
	dialog.buy = DH.newDialog("buy")
	dialog.action = DH.newDialog("action")
	dialog.info = DH.newDialog("info")

	updateDialog("info")

	face.f()
	
	lbl.crewStats.title = gui.new_text_node(vmath.vector3(250, 700, 0), "SKILLS:")
	gui.set_pivot(lbl.crewStats.title, gui.PIVOT_W)
	lbl.crewStats.skillTitle.pilot = gui.new_text_node(vmath.vector3(250, 680, 0), "PILOT")
	gui.set_pivot(lbl.crewStats.skillTitle.pilot, gui.PIVOT_W)
	lbl.crewStats.skillTitle.mech = gui.new_text_node(vmath.vector3(250, 660, 0), "MECHANICS")
	gui.set_pivot(lbl.crewStats.skillTitle.mech, gui.PIVOT_W)
	lbl.crewStats.skillTitle.comms = gui.new_text_node(vmath.vector3(250, 640, 0), "COMMS")
	gui.set_pivot(lbl.crewStats.skillTitle.comms, gui.PIVOT_W)
	lbl.crewStats.skillTitle.gunnery = gui.new_text_node(vmath.vector3(250, 620, 0), "GUNNERY")
	gui.set_pivot(lbl.crewStats.skillTitle.gunnery, gui.PIVOT_W)
	lbl.crewStats.skillTitle.medic = gui.new_text_node(vmath.vector3(250, 600, 0), "MEDICINE")
	gui.set_pivot(lbl.crewStats.skillTitle.medic, gui.PIVOT_W)
	lbl.crewStats.skillTitle.fight = gui.new_text_node(vmath.vector3(250, 580, 0), "FIGHTING")
	gui.set_pivot(lbl.crewStats.skillTitle.fight, gui.PIVOT_W)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("updateCrewDetail") and selectedCrew then
		for key, val in pairs(lbl.crewStats.skills) do
			gui.delete_node(val)
		end
		for key, val in pairs(crew[selectedCrew].skills) do
			local y = statsOrder[key]
			lbl.crewStats.skills[key] = gui.new_text_node(vmath.vector3(350, 700 - 20 * y, 0), text.skillText(val * 10).." "..math.floor(val * 20) / 2)
			gui.set_pivot(lbl.crewStats.skills[key], gui.PIVOT_W)
		end
		for key, val in pairs(btn.role) do
			gui.delete_node(val)
		end
		btn.role.pilot = gui.new_text_node(vmath.vector3(200, 550, 0), "PILOT")
		gui.set_color(btn.role.pilot, CON.COLOR_BUTTONS)
		btn.role.comms = gui.new_text_node(vmath.vector3(275, 550, 0), "COMMS")
		gui.set_color(btn.role.comms, CON.COLOR_BUTTONS)
		btn.role.mech = gui.new_text_node(vmath.vector3(350, 550, 0), "MECHANIC")
		gui.set_color(btn.role.mech, CON.COLOR_BUTTONS)
		btn.role.medic = gui.new_text_node(vmath.vector3(425, 550, 0), "DOCTOR")
		gui.set_color(btn.role.medic, CON.COLOR_BUTTONS)
		btn.role.gunner = gui.new_text_node(vmath.vector3(500, 550, 0), "GUNNER")
		gui.set_color(btn.role.gunner, CON.COLOR_BUTTONS)
		gui.set_layer(btn.role.gunner, "main")
	end
end


function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		for k in pairs(focus) do
			if k == "action" then
				for key, val in pairs(dialog.action.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "buy" then
							fuelBought = CON.MAXFUEL - cargo.fuel
							rationsBought = CON.MAXRATIONS - cargo.rations
							gui.set_text(dialog.buy.lbl.fuelPrice, "@ "..planet.price.fuel.." cr/unit.")
							gui.set_text(dialog.buy.lbl.rationsPrice, "@ "..planet.price.rations.." cr/unit.")
							gui.set_enabled(dialog.buy.frame, true)
							focus = {buy = true}
							updateDialog("buy")
						elseif key == "recruit" then
							gui.set_enabled(dialog.recruit.frame, true)
							focus = {recruit = true}
							updateDialog("recruit")
						elseif key == "travel" then
							gui.set_enabled(dialog.travel.frame, true)
							focus = {travel = true}
							updateDialog("travel")
						end
					end
				end
			elseif k == "buy" then
				for key, val in pairs(dialog.buy.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							gui.set_enabled(dialog.buy.frame, false)
							focus = {action = true}
						elseif key == "fuelPlus" then
							if fuelBought + cargo.fuel < CON.MAXFUEL then
								fuelBought = fuelBought + 1
								updateDialog("buy")
							end
						elseif key == "fuelMinus" then
							if fuelBought > 0 then
								fuelBought = fuelBought - 1
								updateDialog("buy")
							end
						elseif key == "rationsPlus" then
							if rationsBought + cargo.rations < CON.MAXRATIONS then
								rationsBought = rationsBought + 1
								updateDialog("buy")
							end
						elseif key == "rationsMinus" then
							if rationsBought > 0 then
								rationsBought = rationsBought - 1
								updateDialog("buy")
							end
						elseif key == "confirm" then
							if totalPrice <= cargo.money then
								cargo.money = cargo.money - totalPrice
								cargo.fuel = cargo.fuel + fuelBought
								cargo.rations = cargo.rations + rationsBought
								updateDialog("info")
								gui.set_enabled(dialog.buy.frame, false)
								focus = {action = true}
							end
						end
					end
				end
			elseif k == "recruit" then
				for key, val in pairs(dialog.recruit.btn) do
					if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							if selectedRecruit then gui.set_color(dialog.recruit.btn[selectedRecruit].name, CON.COLOR_DEFAULT) end
							selectedRecruit = nil
							gui.set_enabled(dialog.recruit.frame, false)
							focus = {action = true}
						elseif key == "confirm" and selectedRecruit then
							table.insert(crew, planet.recruits[selectedRecruit])
							table.remove(planet.recruits, selectedRecruit)
							gui.set_color(dialog.recruit.btn[selectedRecruit].name, CON.COLOR_DEFAULT)
							selectedRecruit = nil
							updateDialog("recruit")
							updateDialog("crew")
						end
					elseif type(val) == "table" then
						if (gui.pick_node(val.name, action.x, action.y) or gui.pick_node(val.face, action.x, action.y)) and gui.is_enabled(val.name) then
							if selectedRecruit then gui.set_color(dialog.recruit.btn[selectedRecruit].name, CON.COLOR_DEFAULT) end
							selectedRecruit = key
							gui.set_color(val.name, CON.COLOR_SELECTION)
							gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_ENABLED)
						end
					end
				end
			elseif k == "travel" then
				for key, val in pairs(dialog.travel.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "confirm" and selectedTravel then
							selectedTravel = nil
							gui.set_enabled(dialog.travel.frame, false)
							focus = {action = true}
						elseif key == "cancel" then
							selectedTravel = nil
							gui.set_enabled(dialog.travel.frame, false)
							focus = {action = true}
						elseif key == "exploreCore" or key == "exploreFrontier" or key == "exploreRim" then
							selectedTravel = val
							updateDialog("travel")
						elseif (key == "missionCore" or key == "missionFrontier" or key == "missionRim") and gui.get_color(val) == CON.COLOR_DEFAULT then
							selectedTravel = val
							updateDialog("travel")
						end
					end
				end
			end
		end
	elseif action_id == hash("enter") and action.pressed then
		face.refresh()
	end
end
