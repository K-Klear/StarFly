local text = require("main.text")
local FPlanet = require("main.planet")
local DH = require("main.dialogHelper")
local CON = require("main.constants")
local EVENTS = require("main.events")
local FCrew = require("main.functionsCrew")
local FACE = require("main.face")


local focus = {action = true}

local planet = FPlanet.generatePlanet("Frontier", true)
local mission = {}

local dialog = {}

local fuelBought = CON.MAXFUEL - cargo.fuel
local rationsBought = CON.MAXRATIONS - cargo.rations
local totalPrice

local statsOrder = {pilot = 1, mech = 2, comms = 3, gunnery = 4, medic = 5, fight = 6}

local selection
local currentMission

local function updateDialog(dialogID)
	if dialogID == "buy" then
		gui.set_text(dialog.buy.lbl.fuelAmount, fuelBought)
		gui.set_text(dialog.buy.lbl.rationsAmount, rationsBought)
		totalPrice = planet.price.fuel * fuelBought + planet.price.rations * rationsBought
		gui.set_text(dialog.buy.lbl.totalPrice, totalPrice)
		if totalPrice > cargo.money then
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_DISABLED)
		else
			gui.set_color(dialog.buy.btn.confirm, CON.COLOR_ENABLED)
		end
	elseif dialogID == "recruit" then
		if #planet.recruits == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.recruit.btn[x].face, false)
				gui.set_enabled(dialog.recruit.btn[x].name, false)
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, true)
		else
			for x = 1, 5 do
				if #planet.recruits >= x then
					gui.set_text(dialog.recruit.btn[x].name, text.getName(planet.recruits[x]))
					gui.set_enabled(dialog.recruit.btn[x].face, true)
					gui.set_enabled(dialog.recruit.btn[x].name, true)
				else
					gui.set_enabled(dialog.recruit.btn[x].face, false)
					gui.set_enabled(dialog.recruit.btn[x].name, false)
				end
			end
			gui.set_enabled(dialog.recruit.lbl.nobody, false)
		end
		if selection then
			gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "info" then
		gui.set_text(dialog.info.lbl.fuel, "FUEL: "..cargo.fuel)
		gui.set_text(dialog.info.lbl.rations, "RATIONS: "..cargo.rations)
		gui.set_text(dialog.info.lbl.money, "CREDITS: "..cargo.money)
		gui.set_text(dialog.info.lbl.region, planet.region)
		gui.set_text(dialog.info.lbl.settlement, planet.settlement)
		gui.set_text(dialog.info.lbl.government, planet.government)
	elseif dialogID == "crew" then
		local y = 1
		for key, val in ipairs(crew) do
			if val.active then
				gui.set_text(dialog.crew.btn[y].name, text.getName(val))
				gui.set_enabled(dialog.crew.btn[y].name, true)
				gui.set_enabled(dialog.crew.btn[y].face, true)
				y = y + 1
			end
		end
		if y < #dialog.crew.btn then
			for x = y, #dialog.crew.btn do
				gui.set_enabled(dialog.crew.btn[x].name, false)
				gui.set_enabled(dialog.crew.btn[x].face, false)
			end
		end
	elseif dialogID == "travel" then
		gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DISABLED)
		gui.set_color(dialog.travel.btn.exploreCore, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreFrontier, CON.COLOR_DEFAULT)
		gui.set_color(dialog.travel.btn.exploreRim, CON.COLOR_DEFAULT)
		for key, val in ipairs(mission) do
			if val.target == "Core" then
				gui.set_color(dialog.travel.btn.missionCore, CON.COLOR_DEFAULT)
			elseif val.target == "Frontier" then
				gui.set_color(dialog.travel.btn.missionFrontier, CON.COLOR_DEFAULT)
			elseif val.target == "Rim" then
				gui.set_color(dialog.travel.btn.missionRim, CON.COLOR_DEFAULT)
			end
		end
		if selection then
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DEFAULT)
			gui.set_color(selection, CON.COLOR_SELECTION)
		else
			gui.set_color(dialog.travel.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "work" then
		if #planet.missions == 0 then
			for x = 1, 5 do
				gui.set_enabled(dialog.work.btn[x].type, false)
				gui.set_enabled(dialog.work.btn[x].target, false)
				gui.set_enabled(dialog.work.btn[x].wage, false)
			end
			gui.set_enabled(dialog.work.lbl.none, true)
		else
			for x = 1, 5 do
				if #planet.missions >= x then
					gui.set_text(dialog.work.btn[x].type, planet.missions[x].type)
					gui.set_text(dialog.work.btn[x].target, planet.missions[x].target)
					gui.set_text(dialog.work.btn[x].wage, planet.missions[x].wage)
					gui.set_enabled(dialog.work.btn[x].type, true)
					gui.set_enabled(dialog.work.btn[x].target, true)
					gui.set_enabled(dialog.work.btn[x].wage, true)
				else
					gui.set_enabled(dialog.work.btn[x].type, false)
					gui.set_enabled(dialog.work.btn[x].target, false)
					gui.set_enabled(dialog.work.btn[x].wage, false)
				end
			end
			gui.set_enabled(dialog.work.lbl.none, false)
		end
		if selection then
			gui.set_color(dialog.work.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.work.btn.confirm, CON.COLOR_DISABLED)
		end
	elseif dialogID == "missions" then
		for x = 1, 5 do
			if x > #currentMission then
				gui.set_enabled(dialog.missions.btn[x].type, false)
				gui.set_enabled(dialog.missions.btn[x].target, false)
				gui.set_enabled(dialog.missions.btn[x].wage, false)
			else
				gui.set_text(dialog.missions.btn[x].type, mission[currentMission[x]].type)
				gui.set_text(dialog.missions.btn[x].target, mission[currentMission[x]].target)
				gui.set_text(dialog.missions.btn[x].wage, mission[currentMission[x]].wage)
				gui.set_enabled(dialog.missions.btn[x].type, true)
				gui.set_enabled(dialog.missions.btn[x].target, true)
				gui.set_enabled(dialog.missions.btn[x].wage, true)
			end
		end
		if selection then
			gui.set_color(dialog.missions.btn.confirm, CON.COLOR_ENABLED)
		else
			gui.set_color(dialog.missions.btn.confirm, CON.COLOR_DISABLED)
		end
		gui.set_enabled(dialog.missions.lbl.none, false)
	end
end

local function travel(target, mission)
	cargo.fuel = cargo.fuel - 1
	cargo.rations = cargo.rations - #crew
	planet = FPlanet.generatePlanet(target)
	updateDialog("info")
end

local function checkMission(target)
	local missionList = {}
	for key, val in ipairs(mission) do
		if val.target == target then
			table.insert(missionList, key)
		end
	end
	return missionList
end

function init(self)
	
	dialog.travel = DH.newDialog("travel")
	dialog.recruit = DH.newDialog("recruit")
	dialog.buy = DH.newDialog("buy")
	dialog.action = DH.newDialog("action", true)
	dialog.info = DH.newDialog("info", true)
	dialog.warning = DH.newDialog("warning")
	dialog.crew = DH.newDialog("crew", true)
	dialog.work = DH.newDialog("work")
	dialog.missions = DH.newDialog("work")
	gui.set_text(dialog.missions.lbl.none, "There are no ongoing jobs.")
	gui.set_text(dialog.missions.lbl.title, "CHOOSE A MISSION")

	updateDialog("info")

	for x = 1, 9 do
		table.insert(crew, FCrew.generateCrew())
		text.setNameAvailability(crew[#crew].name.gender, crew[#crew].name.key, true)
	end
	updateDialog("crew")

end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		for k in pairs(focus) do
			if k == "action" then
				for key, val in pairs(dialog.action.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "buy" then
							fuelBought = CON.MAXFUEL - cargo.fuel
							rationsBought = CON.MAXRATIONS - cargo.rations
							gui.set_text(dialog.buy.lbl.fuelPrice, "@ "..planet.price.fuel.." cr/unit.")
							gui.set_text(dialog.buy.lbl.rationsPrice, "@ "..planet.price.rations.." cr/unit.")
							gui.set_enabled(dialog.buy.frame, true)
							focus = {buy = true}
							updateDialog("buy")
						elseif key == "recruit" then
							gui.set_enabled(dialog.recruit.frame, true)
							focus = {recruit = true}
							updateDialog("recruit")
						elseif key == "travel" then
							gui.set_enabled(dialog.travel.frame, true)
							focus = {travel = true}
							updateDialog("travel")
						elseif key == "work" then
							gui.set_enabled(dialog.work.frame, true)
							focus = {work = true}
							updateDialog("work")
						end
					end
				end
			elseif k == "buy" then
				for key, val in pairs(dialog.buy.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							gui.set_enabled(dialog.buy.frame, false)
							focus = {action = true}
						elseif key == "fuelPlus" then
							if fuelBought + cargo.fuel < CON.MAXFUEL then
								fuelBought = fuelBought + 1
								updateDialog("buy")
							end
						elseif key == "fuelMinus" then
							if fuelBought > 0 then
								fuelBought = fuelBought - 1
								updateDialog("buy")
							end
						elseif key == "rationsPlus" then
							if rationsBought + cargo.rations < CON.MAXRATIONS then
								rationsBought = rationsBought + 1
								updateDialog("buy")
							end
						elseif key == "rationsMinus" then
							if rationsBought > 0 then
								rationsBought = rationsBought - 1
								updateDialog("buy")
							end
						elseif key == "confirm" then
							if totalPrice <= cargo.money then
								cargo.money = cargo.money - totalPrice
								cargo.fuel = cargo.fuel + fuelBought
								cargo.rations = cargo.rations + rationsBought
								updateDialog("info")
								gui.set_enabled(dialog.buy.frame, false)
								focus = {action = true}
							end
						end
					end
				end
			elseif k == "recruit" then
				for key, val in pairs(dialog.recruit.btn) do
					if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							if selection then gui.set_color(dialog.recruit.btn[selection].name, CON.COLOR_DEFAULT) end
							selection = nil
							gui.set_enabled(dialog.recruit.frame, false)
							focus = {action = true}
						elseif key == "confirm" and selection then
							table.insert(crew, planet.recruits[selection])
							table.remove(planet.recruits, selection)
							gui.set_color(dialog.recruit.btn[selection].name, CON.COLOR_DEFAULT)
							selection = nil
							updateDialog("recruit")
							updateDialog("crew")
						end
					elseif type(val) == "table" then
						if (gui.pick_node(val.name, action.x, action.y) or gui.pick_node(val.face, action.x, action.y)) and gui.is_enabled(val.name) then
							if selection then gui.set_color(dialog.recruit.btn[selection].name, CON.COLOR_DEFAULT) end
							selection = key
							gui.set_color(val.name, CON.COLOR_SELECTION)
							gui.set_color(dialog.recruit.btn.confirm, CON.COLOR_ENABLED)
						end
					end
				end
			elseif k == "travel" then
				for key, val in pairs(dialog.travel.btn) do
					if gui.pick_node(val, action.x, action.y) then
						if key == "confirm" and selection then
							gui.set_enabled(dialog.travel.frame, false)
							if cargo.fuel < 1 then
								gui.set_text(dialog.warning.lbl.text, "You don't have enough fuel!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							elseif cargo.rations < #crew then
								gui.set_text(dialog.warning.lbl.text, "You don't have enough rations!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							elseif #crew == 0 then
								gui.set_text(dialog.warning.lbl.text, "You don't have any crew!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							else
								local chosenTarget
								if selection == dialog.travel.btn.exploreCore then
									travel("Core")
									focus = {action = true}
								elseif selection == dialog.travel.btn.exploreFrontier then
									travel("Frontier")
									focus = {action = true}
								elseif selection == dialog.travel.btn.exploreRim then
									travel("Rim")
									focus = {action = true}
								elseif selection == dialog.travel.btn.missionCore then
									chosenTarget = "Core"
								elseif selection == dialog.travel.btn.missionFrontier then
									chosenTarget = "Frontier"
								elseif selection == dialog.travel.btn.missionRim then
									chosenTarget = "Rim"
								end
								if chosenTarget then
									currentMission = checkMission(chosenTarget)
									if #currentMission == 1 then
										travel(chosenTarget)
										gui.set_text(dialog.warning.lbl.text, "Job completed. You earned "..mission[currentMission[1]].wage)
										gui.set_enabled(dialog.warning.frame, true)
										focus = {warning = true}
										cargo.money = cargo.money + mission[currentMission[1]].wage
										updateDialog("info")
										table.remove(mission, currentMission[1])
									else
										updateDialog("missions")
										selection = nil
										gui.set_enabled(dialog.missions.frame, true)
										focus = {missions = true}
									end
								end
							end
							selection = nil
						elseif key == "cancel" then
							selection = nil
							gui.set_enabled(dialog.travel.frame, false)
							focus = {action = true}
						elseif key == "exploreCore" or key == "exploreFrontier" or key == "exploreRim" then
							selection = val
							updateDialog("travel")
						elseif (key == "missionCore" or key == "missionFrontier" or key == "missionRim") and gui.get_color(val) == CON.COLOR_DEFAULT then
							selection = val
							updateDialog("travel")
						end
					end
				end
			elseif k == "work" then
				for key, val in pairs(dialog.work.btn) do
					if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							if selection then
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = nil
							gui.set_enabled(dialog.work.frame, false)
							focus = {action = true}
						elseif key == "confirm" and selection then
							if #mission > 4 then
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
								selection = nil
								gui.set_enabled(dialog.work.frame, false)
								gui.set_text(dialog.warning.lbl.text, "You have too many missions already!")
								gui.set_enabled(dialog.warning.frame, true)
								focus = {warning = true}
							else
								table.insert(mission, planet.missions[selection])
								table.remove(planet.missions, selection)
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
								selection = nil
								gui.set_enabled(dialog.work.frame, false)
								focus = {action = true}
							end
						end
					elseif type(val) == "table" then
						if (gui.pick_node(val.type, action.x, action.y) or gui.pick_node(val.target, action.x, action.y) or gui.pick_node(val.wage, action.x, action.y)) and gui.is_enabled(val.type) then
							if selection then
								gui.set_color(dialog.work.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.work.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = key
							gui.set_color(val.type, CON.COLOR_SELECTION)
							gui.set_color(val.target, CON.COLOR_SELECTION)
							gui.set_color(val.wage, CON.COLOR_SELECTION)
							gui.set_color(dialog.work.btn.confirm, CON.COLOR_ENABLED)
						end
					end
				end
			elseif k == "missions" then
				for key, val in pairs(dialog.missions.btn) do
					if type(val) == "userdata" and gui.pick_node(val, action.x, action.y) then
						if key == "cancel" then
							if selection then
								gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = nil
							updateDialog("travel")
							gui.set_enabled(dialog.missions.frame, false)
							gui.set_enabled(dialog.travel.frame, true)
							focus = {travel = true}
						elseif key == "confirm" and selection then
							currentMission = {currentMission[selection]}
							gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
							gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
							selection = nil
							gui.set_enabled(dialog.missions.frame, false)
							travel(mission[currentMission[1]].target)
							gui.set_text(dialog.warning.lbl.text, "Job completed. You earned "..mission[currentMission[1]].wage)
							gui.set_enabled(dialog.warning.frame, true)
							focus = {warning = true}
							cargo.money = cargo.money + mission[currentMission[1]].wage
							updateDialog("info")
							table.remove(mission, currentMission[1])
						end
					elseif type(val) == "table" then
						if (gui.pick_node(val.type, action.x, action.y) or gui.pick_node(val.target, action.x, action.y) or gui.pick_node(val.wage, action.x, action.y)) and gui.is_enabled(val.type) then
							if selection then
								gui.set_color(dialog.missions.btn[selection].type, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].target, CON.COLOR_DEFAULT)
								gui.set_color(dialog.missions.btn[selection].wage, CON.COLOR_DEFAULT)
							end
							selection = key
							gui.set_color(val.type, CON.COLOR_SELECTION)
							gui.set_color(val.target, CON.COLOR_SELECTION)
							gui.set_color(val.wage, CON.COLOR_SELECTION)
							gui.set_color(dialog.missions.btn.confirm, CON.COLOR_ENABLED)
						end
					end
				end
			elseif k == "warning" then
				gui.set_enabled(dialog.warning.frame, false)
				focus = {action = true}
			end
		end
	elseif action_id == hash("enter") and action.pressed then
		for y = 500, 300, -100 do
			for x = 300, 1200, 100 do
				pprint(FACE.drawFace(FACE.createFace(), vmath.vector3(x, y, 0), 2))
			end
		end
	end
end